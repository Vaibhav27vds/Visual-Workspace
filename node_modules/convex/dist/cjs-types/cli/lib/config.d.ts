import { Context } from "../../bundler/context.js";
import { Bundle } from "../../bundler/index.js";
export { productionProvisionHost, provisionHost } from "./utils.js";
/** Type representing auth configuration. */
export interface AuthInfo {
    applicationID: string;
    domain: string;
}
/** Type representing Convex project configuration. */
export interface ProjectConfig {
    functions: string;
    node: {
        externalPackages: string[];
    };
    generateCommonJSApi: boolean;
    project?: string;
    team?: string;
    prodUrl?: string;
    authInfo?: AuthInfo[];
}
interface NodeDependency {
    name: string;
    version: string;
}
export interface Config {
    projectConfig: ProjectConfig;
    modules: Bundle[];
    nodeDependencies: NodeDependency[];
    schemaId?: string;
    udfServerVersion?: string;
    authConfig?: Bundle;
}
/** Parse object to ProjectConfig. */
export declare function parseProjectConfig(ctx: Context, obj: any): Promise<ProjectConfig>;
export declare function configName(): string;
export declare function configFilepath(ctx: Context): Promise<string>;
export declare function getFunctionsDirectoryPath(ctx: Context): Promise<string>;
/** Read configuration from a local `convex.json` file. */
export declare function readProjectConfig(ctx: Context): Promise<{
    projectConfig: ProjectConfig;
    configPath: string;
}>;
export declare function enforceDeprecatedConfigField(ctx: Context, config: ProjectConfig, field: "team" | "project" | "prodUrl"): Promise<string>;
/**
 * Given an {@link ProjectConfig}, add in the bundled modules to produce the
 * complete config.
 */
export declare function configFromProjectConfig(ctx: Context, projectConfig: ProjectConfig, configPath: string, verbose: boolean): Promise<{
    config: Config;
    bundledModuleInfos: BundledModuleInfo[];
}>;
/**
 * Read the config from `convex.json` and bundle all the modules.
 */
export declare function readConfig(ctx: Context, verbose: boolean): Promise<{
    config: Config;
    configPath: string;
    bundledModuleInfos: BundledModuleInfo[];
}>;
export declare function upgradeOldAuthInfoToAuthConfig(ctx: Context, config: ProjectConfig, functionsPath: string): Promise<ProjectConfig>;
/** Write the config to `convex.json` in the current working directory. */
export declare function writeProjectConfig(ctx: Context, projectConfig: ProjectConfig, { deleteIfAllDefault }?: {
    deleteIfAllDefault: boolean;
}): Promise<undefined>;
export declare function removedExistingConfig(ctx: Context, configPath: string, options: {
    allowExistingConfig?: boolean;
}): boolean;
/** Pull configuration from the given remote origin. */
export declare function pullConfig(ctx: Context, project: string | undefined, team: string | undefined, origin: string, adminKey: string): Promise<Config>;
interface BundledModuleInfo {
    name: string;
    platform: "node" | "convex";
}
export declare function configJSON(config: Config, adminKey: string, schemaId?: string, pushMetrics?: PushMetrics, bundledModuleInfos?: BundledModuleInfo[]): {
    config: {
        projectSlug: string | undefined;
        teamSlug: string | undefined;
        functions: string;
        authInfo: AuthInfo[] | undefined;
    };
    modules: Bundle[];
    nodeDependencies: NodeDependency[];
    udfServerVersion: string | undefined;
    schemaId: string | undefined;
    adminKey: string;
    pushMetrics: PushMetrics | undefined;
    bundledModuleInfos: BundledModuleInfo[] | undefined;
};
export type PushMetrics = {
    typecheck: number;
    bundle: number;
    schemaPush: number;
    codePull: number;
    totalBeforePush: number;
};
/** Push configuration to the given remote origin. */
export declare function pushConfig(ctx: Context, config: Config, adminKey: string, url: string, pushMetrics?: PushMetrics, schemaId?: string, bundledModuleInfos?: BundledModuleInfo[]): Promise<void>;
type Files = {
    source: string;
    filename: string;
}[];
export type CodegenResponse = {
    success: true;
    files: Files;
} | {
    success: false;
    error: string;
};
/** Generate a human-readable diff between the two configs. */
export declare function diffConfig(oldConfig: Config, newConfig: Config): string;
//# sourceMappingURL=config.d.ts.map