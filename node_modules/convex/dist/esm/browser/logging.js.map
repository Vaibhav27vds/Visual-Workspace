{
  "version": 3,
  "sources": ["../../../src/browser/logging.ts"],
  "sourcesContent": ["// This is blue #9 from https://www.radix-ui.com/docs/colors/palette-composition/the-scales\n\nimport { ConvexError, Value } from \"../values\";\nimport { FunctionFailure } from \"./sync/function_result\";\n\n// It must look good in both light and dark mode.\nconst INFO_COLOR = \"color:rgb(0, 145, 255)\";\n\nexport type UdfType = \"query\" | \"mutation\" | \"action\" | \"any\";\n\nfunction prefix_for_source(source: UdfType) {\n  switch (source) {\n    case \"query\":\n      return \"Q\";\n    case \"mutation\":\n      return \"M\";\n    case \"action\":\n      return \"A\";\n    case \"any\":\n      return \"?\";\n  }\n}\n\nexport function logToConsole(\n  type: \"info\" | \"error\",\n  source: UdfType,\n  udfPath: string,\n  message: string | { errorData: Value }\n) {\n  const prefix = prefix_for_source(source);\n\n  if (typeof message === \"object\") {\n    message = `ConvexError ${JSON.stringify(message.errorData, null, 2)}`;\n  }\n  if (type === \"info\") {\n    const match = message.match(/^\\[.*?\\] /);\n    if (match === null) {\n      console.error(\n        `[CONVEX ${prefix}(${udfPath})] Could not parse console.log`\n      );\n      return;\n    }\n    const level = message.slice(1, match[0].length - 2);\n    const args = message.slice(match[0].length);\n\n    console.log(\n      `%c[CONVEX ${prefix}(${udfPath})] [${level}]`,\n      INFO_COLOR,\n      args\n    );\n  } else {\n    console.error(`[CONVEX ${prefix}(${udfPath})] ${message}`);\n  }\n}\n\nexport function logFatalError(message: string): Error {\n  const errorMessage = `[CONVEX FATAL ERROR] ${message}`;\n  console.error(errorMessage);\n  return new Error(errorMessage);\n}\n\nexport function createHybridErrorStacktrace(\n  source: UdfType,\n  udfPath: string,\n  result: FunctionFailure\n): string {\n  const prefix = prefix_for_source(source);\n  return `[CONVEX ${prefix}(${udfPath})] ${result.errorMessage}\\n  Called by client`;\n}\n\nexport function forwardData(\n  result: FunctionFailure,\n  error: ConvexError<string>\n) {\n  (error as ConvexError<any>).data = result.errorData;\n  return error;\n}\n"],
  "mappings": ";AAMA,MAAM,aAAa;AAInB,SAAS,kBAAkB,QAAiB;AAC1C,UAAQ,QAAQ;AAAA,IACd,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,EACX;AACF;AAEO,gBAAS,aACd,MACA,QACA,SACA,SACA;AACA,QAAM,SAAS,kBAAkB,MAAM;AAEvC,MAAI,OAAO,YAAY,UAAU;AAC/B,cAAU,eAAe,KAAK,UAAU,QAAQ,WAAW,MAAM,CAAC;AAAA,EACpE;AACA,MAAI,SAAS,QAAQ;AACnB,UAAM,QAAQ,QAAQ,MAAM,WAAW;AACvC,QAAI,UAAU,MAAM;AAClB,cAAQ;AAAA,QACN,WAAW,UAAU;AAAA,MACvB;AACA;AAAA,IACF;AACA,UAAM,QAAQ,QAAQ,MAAM,GAAG,MAAM,CAAC,EAAE,SAAS,CAAC;AAClD,UAAM,OAAO,QAAQ,MAAM,MAAM,CAAC,EAAE,MAAM;AAE1C,YAAQ;AAAA,MACN,aAAa,UAAU,cAAc;AAAA,MACrC;AAAA,MACA;AAAA,IACF;AAAA,EACF,OAAO;AACL,YAAQ,MAAM,WAAW,UAAU,aAAa,SAAS;AAAA,EAC3D;AACF;AAEO,gBAAS,cAAc,SAAwB;AACpD,QAAM,eAAe,wBAAwB;AAC7C,UAAQ,MAAM,YAAY;AAC1B,SAAO,IAAI,MAAM,YAAY;AAC/B;AAEO,gBAAS,4BACd,QACA,SACA,QACQ;AACR,QAAM,SAAS,kBAAkB,MAAM;AACvC,SAAO,WAAW,UAAU,aAAa,OAAO;AAAA;AAClD;AAEO,gBAAS,YACd,QACA,OACA;AACA,EAAC,MAA2B,OAAO,OAAO;AAC1C,SAAO;AACT;",
  "names": []
}
