"use strict";
import chalk from "chalk";
import util from "util";
import ws from "ws";
import { ConvexHttpClient } from "../../browser/http_client-node.js";
import { BaseConvexClient } from "../../browser/index.js";
import { makeFunctionReference } from "../../server/index.js";
import { convexToJson } from "../../values/value.js";
import {
  logError,
  logFailure,
  logFinishedStep,
  logMessage,
  logOutput
} from "../../bundler/context.js";
export async function runFunctionAndLog(ctx, deploymentUrl, adminKey, functionName, args, callbacks) {
  const client = new ConvexHttpClient(deploymentUrl);
  client.setAdminAuth(adminKey);
  let result;
  try {
    result = await client.function(makeFunctionReference(functionName), args);
  } catch (err) {
    logFailure(ctx, `Failed to run function "${functionName}":`);
    logError(ctx, chalk.red(err.toString().trim()));
    return await ctx.crash(1, "invalid filesystem or env vars");
  }
  callbacks?.onSuccess?.();
  if (result !== null) {
    logOutput(ctx, formatValue(result));
  }
}
export function formatValue(value) {
  const json = convexToJson(value);
  if (process.stdout.isTTY) {
    return util.inspect(value, { colors: true, depth: null });
  } else {
    return JSON.stringify(json, null, 2);
  }
}
export async function subscribeAndLog(ctx, deploymentUrl, adminKey, functionName, args) {
  return subscribe(
    ctx,
    deploymentUrl,
    adminKey,
    functionName,
    args,
    "indefinitely",
    {
      onStart() {
        logFinishedStep(
          ctx,
          `Watching query ${functionName} on ${deploymentUrl}...`
        );
      },
      onChange(client) {
        logOutput(
          ctx,
          formatValue(client.localQueryResult(functionName, args))
        );
      },
      onStop() {
        logMessage(ctx, `Closing connection to ${deploymentUrl}...`);
      }
    }
  );
}
export async function subscribe(ctx, deploymentUrl, adminKey, functionName, args, until, callbacks) {
  let changes = 0;
  const client = new BaseConvexClient(
    deploymentUrl,
    (updatedQueries) => {
      for (const _ of updatedQueries) {
        changes++;
        callbacks?.onChange?.(client);
        if (until === "first change" && changes > 1) {
          stopWatching();
        }
      }
    },
    {
      // pretend that a Node.js 'ws' library WebSocket is a browser WebSocket
      webSocketConstructor: ws,
      unsavedChangesWarning: false
    }
  );
  client.setAdminAuth(adminKey);
  const { unsubscribe } = client.subscribe(functionName, args);
  callbacks?.onStart?.(client);
  let done = false;
  let onDone;
  const stopWatching = () => {
    unsubscribe();
    void client.close();
    process.off("SIGINT", sigintListener);
    done = true;
    onDone(null);
  };
  const doneP = new Promise((resolve) => onDone = resolve);
  function sigintListener() {
    stopWatching();
  }
  process.on("SIGINT", sigintListener);
  while (!done) {
    const oneDay = 24 * 60 * 60 * 1e3;
    await Promise.race([
      doneP,
      new Promise((resolve) => setTimeout(resolve, oneDay))
    ]);
  }
}
//# sourceMappingURL=run.js.map
