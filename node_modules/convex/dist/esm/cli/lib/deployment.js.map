{
  "version": 3,
  "sources": ["../../../../src/cli/lib/deployment.ts"],
  "sourcesContent": ["import * as dotenv from \"dotenv\";\nimport { Context } from \"../../bundler/context.js\";\nimport { changedEnvVarFile, getEnvVarRegex } from \"./envvars.js\";\n\nconst ENV_VAR_FILE_PATH = \".env.local\";\nexport const CONVEX_DEPLOYMENT_VAR_NAME = \"CONVEX_DEPLOYMENT\";\n\nexport function readDeploymentEnvVar(): string | null {\n  dotenv.config({ path: ENV_VAR_FILE_PATH });\n  dotenv.config();\n  const raw = process.env[CONVEX_DEPLOYMENT_VAR_NAME] ?? null;\n  if (raw === null || raw === \"\") {\n    return null;\n  }\n  return stripDeploymentTypePrefix(raw);\n}\n\n// Given a deployment string like \"dev:tall-forest-1234\"\n// returns only the slug \"tall-forest-1234\".\n// If there's no prefix returns the original string.\nexport function stripDeploymentTypePrefix(deployment: string) {\n  return deployment.split(\":\").at(-1)!;\n}\n\nexport async function writeDeploymentEnvVar(\n  ctx: Context,\n  deploymentType: \"dev\" | \"prod\",\n  deployment: { team: string; project: string; deploymentName: string }\n): Promise<{ wroteToGitIgnore: boolean }> {\n  const existingFile = ctx.fs.exists(ENV_VAR_FILE_PATH)\n    ? ctx.fs.readUtf8File(ENV_VAR_FILE_PATH)\n    : null;\n  const changedFile = changesToEnvVarFile(\n    existingFile,\n    deploymentType,\n    deployment\n  );\n  if (changedFile !== null) {\n    ctx.fs.writeUtf8File(ENV_VAR_FILE_PATH, changedFile);\n    // Only do this if we're not reinitializing an existing setup\n    return { wroteToGitIgnore: await gitIgnoreEnvVarFile(ctx) };\n  }\n  return { wroteToGitIgnore: false };\n}\n\n// Only used in the internal --url flow\nexport async function eraseDeploymentEnvVar(ctx: Context): Promise<boolean> {\n  const existingFile = ctx.fs.exists(ENV_VAR_FILE_PATH)\n    ? ctx.fs.readUtf8File(ENV_VAR_FILE_PATH)\n    : null;\n  if (existingFile === null) {\n    return false;\n  }\n  const config = dotenv.parse(existingFile);\n  const existing = config[CONVEX_DEPLOYMENT_VAR_NAME];\n  if (existing === undefined) {\n    return false;\n  }\n  const changedFile = existingFile.replace(\n    getEnvVarRegex(CONVEX_DEPLOYMENT_VAR_NAME),\n    \"\"\n  );\n  ctx.fs.writeUtf8File(ENV_VAR_FILE_PATH, changedFile);\n  return true;\n}\n\nasync function gitIgnoreEnvVarFile(ctx: Context): Promise<boolean> {\n  const gitIgnorePath = \".gitignore\";\n  const gitIgnoreContents = ctx.fs.exists(gitIgnorePath)\n    ? ctx.fs.readUtf8File(gitIgnorePath)\n    : \"\";\n  const changedGitIgnore = changesToGitIgnore(gitIgnoreContents);\n  if (changedGitIgnore !== null) {\n    ctx.fs.writeUtf8File(gitIgnorePath, changedGitIgnore);\n    return true;\n  }\n  return false;\n}\n\n// exported for tests\nexport function changesToEnvVarFile(\n  existingFile: string | null,\n  deploymentType: \"dev\" | \"prod\",\n  {\n    team,\n    project,\n    deploymentName,\n  }: { team: string; project: string; deploymentName: string }\n): string | null {\n  const deploymentValue = deploymentType + \":\" + deploymentName;\n  const commentOnPreviousLine = \"# Deployment used by `npx convex dev`\";\n  const commentAfterValue = `team: ${team}, project: ${project}`;\n  return changedEnvVarFile(\n    existingFile,\n    CONVEX_DEPLOYMENT_VAR_NAME,\n    deploymentValue,\n    commentAfterValue,\n    commentOnPreviousLine\n  );\n}\n\n// exported for tests\nexport function changesToGitIgnore(existingFile: string | null): string | null {\n  if (existingFile === null) {\n    return `${ENV_VAR_FILE_PATH}\\n`;\n  }\n  const gitIgnoreLines = existingFile.split(\"\\n\");\n  const envVarFileIgnored = gitIgnoreLines.some(\n    (line) =>\n      line === \".env.local\" ||\n      line === \".env.*\" ||\n      line === \".env*\" ||\n      line === \"*.local\" ||\n      line === \".env*.local\"\n  );\n  if (!envVarFileIgnored) {\n    return `${existingFile}\\n${ENV_VAR_FILE_PATH}\\n`;\n  } else {\n    return null;\n  }\n}\n"],
  "mappings": ";AAAA,YAAY,YAAY;AAExB,SAAS,mBAAmB,sBAAsB;AAElD,MAAM,oBAAoB;AACnB,aAAM,6BAA6B;AAEnC,gBAAS,uBAAsC;AACpD,SAAO,OAAO,EAAE,MAAM,kBAAkB,CAAC;AACzC,SAAO,OAAO;AACd,QAAM,MAAM,QAAQ,IAAI,0BAA0B,KAAK;AACvD,MAAI,QAAQ,QAAQ,QAAQ,IAAI;AAC9B,WAAO;AAAA,EACT;AACA,SAAO,0BAA0B,GAAG;AACtC;AAKO,gBAAS,0BAA0B,YAAoB;AAC5D,SAAO,WAAW,MAAM,GAAG,EAAE,GAAG,EAAE;AACpC;AAEA,sBAAsB,sBACpB,KACA,gBACA,YACwC;AACxC,QAAM,eAAe,IAAI,GAAG,OAAO,iBAAiB,IAChD,IAAI,GAAG,aAAa,iBAAiB,IACrC;AACJ,QAAM,cAAc;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,MAAI,gBAAgB,MAAM;AACxB,QAAI,GAAG,cAAc,mBAAmB,WAAW;AAEnD,WAAO,EAAE,kBAAkB,MAAM,oBAAoB,GAAG,EAAE;AAAA,EAC5D;AACA,SAAO,EAAE,kBAAkB,MAAM;AACnC;AAGA,sBAAsB,sBAAsB,KAAgC;AAC1E,QAAM,eAAe,IAAI,GAAG,OAAO,iBAAiB,IAChD,IAAI,GAAG,aAAa,iBAAiB,IACrC;AACJ,MAAI,iBAAiB,MAAM;AACzB,WAAO;AAAA,EACT;AACA,QAAM,SAAS,OAAO,MAAM,YAAY;AACxC,QAAM,WAAW,OAAO,0BAA0B;AAClD,MAAI,aAAa,QAAW;AAC1B,WAAO;AAAA,EACT;AACA,QAAM,cAAc,aAAa;AAAA,IAC/B,eAAe,0BAA0B;AAAA,IACzC;AAAA,EACF;AACA,MAAI,GAAG,cAAc,mBAAmB,WAAW;AACnD,SAAO;AACT;AAEA,eAAe,oBAAoB,KAAgC;AACjE,QAAM,gBAAgB;AACtB,QAAM,oBAAoB,IAAI,GAAG,OAAO,aAAa,IACjD,IAAI,GAAG,aAAa,aAAa,IACjC;AACJ,QAAM,mBAAmB,mBAAmB,iBAAiB;AAC7D,MAAI,qBAAqB,MAAM;AAC7B,QAAI,GAAG,cAAc,eAAe,gBAAgB;AACpD,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAGO,gBAAS,oBACd,cACA,gBACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AACF,GACe;AACf,QAAM,kBAAkB,iBAAiB,MAAM;AAC/C,QAAM,wBAAwB;AAC9B,QAAM,oBAAoB,SAAS,kBAAkB;AACrD,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAGO,gBAAS,mBAAmB,cAA4C;AAC7E,MAAI,iBAAiB,MAAM;AACzB,WAAO,GAAG;AAAA;AAAA,EACZ;AACA,QAAM,iBAAiB,aAAa,MAAM,IAAI;AAC9C,QAAM,oBAAoB,eAAe;AAAA,IACvC,CAAC,SACC,SAAS,gBACT,SAAS,YACT,SAAS,WACT,SAAS,aACT,SAAS;AAAA,EACb;AACA,MAAI,CAAC,mBAAmB;AACtB,WAAO,GAAG;AAAA,EAAiB;AAAA;AAAA,EAC7B,OAAO;AACL,WAAO;AAAA,EACT;AACF;",
  "names": []
}
