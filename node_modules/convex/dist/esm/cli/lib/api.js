"use strict";
import chalk from "chalk";
import {
  bigBrainAPI,
  bigBrainAPIMaybeThrows,
  getAuthHeaderFromGlobalConfig,
  getConfiguredDeploymentOrCrash,
  logAndHandleAxiosError
} from "./utils.js";
import { logError, logFailure } from "../../bundler/context.js";
import {
  readDeploymentEnvVar,
  stripDeploymentTypePrefix
} from "./deployment.js";
import { buildEnvironment } from "./envvars.js";
import { checkAuthorization, performLogin } from "./login.js";
export const CONVEX_DEPLOY_KEY_ENV_VAR_NAME = "CONVEX_DEPLOY_KEY";
export async function createProjectProvisioningDevOrProd(ctx, {
  teamSlug: selectedTeamSlug,
  projectName
}, firstDeploymentType) {
  const provisioningArgs = {
    team: selectedTeamSlug,
    projectName,
    deploymentType: firstDeploymentType,
    backendVersionOverride: process.env.CONVEX_BACKEND_VERSION_OVERRIDE
  };
  const data = await bigBrainAPI({
    ctx,
    method: "POST",
    url: "create_project",
    data: provisioningArgs
  });
  const {
    projectSlug,
    teamSlug,
    deploymentName,
    adminKey,
    projectsRemaining,
    prodUrl: url
  } = data;
  if (projectSlug === void 0 || teamSlug === void 0 || deploymentName === void 0 || url === void 0 || adminKey === void 0 || projectsRemaining === void 0) {
    const error = "Unexpected response during provisioning: " + JSON.stringify(data);
    logError(ctx, chalk.red(error));
    return await ctx.crash(1, "transient", error);
  }
  return {
    projectSlug,
    teamSlug,
    deploymentName,
    url,
    adminKey,
    projectsRemaining
  };
}
export async function fetchDeploymentCredentialsProvisioningDevOrProd(ctx, { teamSlug, projectSlug }, deploymentType) {
  try {
    return fetchDeploymentCredentialsProvisioningDevOrProdMaybeThrows(
      ctx,
      { teamSlug, projectSlug },
      deploymentType
    );
  } catch (error) {
    return await logAndHandleAxiosError(ctx, error);
  }
}
export async function fetchDeploymentCredentialsForName(ctx, deploymentName, deploymentType) {
  let data;
  try {
    data = await bigBrainAPIMaybeThrows({
      ctx,
      method: "POST",
      url: "deployment/authorize_for_name",
      data: {
        deploymentName,
        deploymentType
      }
    });
  } catch (error) {
    return { error };
  }
  const adminKey = data.adminKey;
  const url = data.url;
  if (adminKey === void 0 || url === void 0) {
    const msg = "Unknown error during authorization: " + JSON.stringify(data);
    logError(ctx, chalk.red(msg));
    return await ctx.crash(1, "transient", new Error(msg));
  }
  return { deploymentName, adminKey, url };
}
export function readConfiguredAdminKey(adminKey) {
  return adminKey ?? process.env[CONVEX_DEPLOY_KEY_ENV_VAR_NAME] ?? void 0;
}
export async function fetchProdDeploymentCredentials(ctx, options) {
  const configuredAdminKey = readConfiguredAdminKey(options.adminKey);
  const configuredUrl = options.url ?? await deriveUrlFromAdminKey(ctx, configuredAdminKey);
  const configuredDeployment = readDeploymentEnvVar();
  if (configuredAdminKey === void 0) {
    const buildEnvironmentExpectsConvexDeployKey = buildEnvironment();
    if (buildEnvironmentExpectsConvexDeployKey) {
      logFailure(
        ctx,
        `${buildEnvironmentExpectsConvexDeployKey} build environment detected but ${CONVEX_DEPLOY_KEY_ENV_VAR_NAME} is not set. Set this environment variable to deploy from this environment. See https://docs.convex.dev/production/hosting`
      );
      await ctx.crash(1);
    }
    const header = await getAuthHeaderFromGlobalConfig(ctx);
    if (!header) {
      logFailure(
        ctx,
        `Error: You are not logged in. Log in with \`npx convex dev\` or set the ${CONVEX_DEPLOY_KEY_ENV_VAR_NAME} environment variable. See https://docs.convex.dev/production/hosting`
      );
      await ctx.crash(1);
    }
  }
  if (configuredAdminKey !== void 0 && configuredUrl !== void 0) {
    return { adminKey: configuredAdminKey, url: configuredUrl };
  }
  if (configuredDeployment === null) {
    logFailure(
      ctx,
      "No CONVEX_DEPLOYMENT set, run `npx convex dev` to configure a Convex project"
    );
    return await ctx.crash(1);
  }
  const data = await bigBrainAPI({
    ctx,
    method: "POST",
    url: "deployment/authorize_prod",
    data: {
      deploymentName: configuredDeployment
    }
  });
  const prodDeploymentName = data.deploymentName;
  const adminKey = data.adminKey;
  const url = data.url;
  if (adminKey === void 0 || url === void 0 || prodDeploymentName === void 0) {
    const msg = "Unknown error during authorization: " + JSON.stringify(data);
    logError(ctx, chalk.red(msg));
    return await ctx.crash(1, "transient", new Error(msg));
  }
  return {
    deploymentNames: {
      prod: prodDeploymentName,
      configured: configuredDeployment
    },
    adminKey: configuredAdminKey ?? adminKey,
    url: configuredUrl ?? url
  };
}
export async function fetchDeploymentCredentialsProvisionProd(ctx, options) {
  const deploymentType = options.prod ? "prod" : "dev";
  if (deploymentType === "prod") {
    const result2 = await fetchProdDeploymentCredentials(ctx, options);
    return {
      url: result2.url,
      adminKey: result2.adminKey,
      deploymentName: result2.deploymentNames?.prod
    };
  }
  const { url, adminKey } = options;
  if (url !== void 0 && adminKey !== void 0) {
    return { url, adminKey };
  }
  if (!await checkAuthorization(ctx, false)) {
    await performLogin(ctx);
  }
  const configuredDeployment = await getConfiguredDeploymentOrCrash(ctx);
  const result = await fetchExistingDeploymentCredentialsOrCrash(
    ctx,
    configuredDeployment,
    deploymentType
  );
  return {
    url: result.url,
    adminKey: result.adminKey,
    deploymentName: configuredDeployment
  };
}
export async function fetchTeamAndProject(ctx, deploymentName) {
  const data = await bigBrainAPI({
    ctx,
    method: "GET",
    url: `deployment/${deploymentName}/team_and_project`
  });
  const { team, project } = data;
  if (team === void 0 || project === void 0) {
    const msg = "Unknown error when fetching team and project: " + JSON.stringify(data);
    logFailure(ctx, msg);
    return await ctx.crash(1, "transient", new Error(msg));
  }
  return data;
}
export async function fetchDeploymentCredentialsProvisioningDevOrProdMaybeThrows(ctx, { teamSlug, projectSlug }, deploymentType) {
  const data = await await bigBrainAPIMaybeThrows({
    ctx,
    method: "POST",
    url: "deployment/provision_and_authorize",
    data: {
      teamSlug,
      projectSlug,
      deploymentType
    }
  });
  const deploymentName = data.deploymentName;
  const adminKey = data.adminKey;
  const url = data.url;
  if (adminKey === void 0 || url === void 0) {
    const msg = "Unknown error during authorization: " + JSON.stringify(data);
    logError(ctx, chalk.red(msg));
    return await ctx.crash(1, "transient", new Error(msg));
  }
  return { adminKey, url, deploymentName };
}
async function fetchExistingDeploymentCredentialsOrCrash(ctx, deploymentName, deploymentType) {
  const credentials = await fetchDeploymentCredentialsForName(
    ctx,
    deploymentName,
    deploymentType
  );
  if ("error" in credentials) {
    logFailure(
      ctx,
      `Failed to authorize "${deploymentName}" configured in CONVEX_DEPLOYMENT, run \`npx convex dev\` to configure a Convex project`
    );
    return await ctx.crash(1, "invalid filesystem data", credentials.error);
  }
  return credentials;
}
async function deriveUrlFromAdminKey(ctx, adminKey) {
  if (!adminKey) {
    return void 0;
  }
  const deploymentName = await deploymentNameFromAdminKey(ctx, adminKey);
  return `https://${deploymentName}.convex.cloud`;
}
export const deploymentNameFromAdminKey = async (ctx, adminKey) => {
  const parts = adminKey.split("|");
  if (parts.length === 1) {
    logFailure(
      ctx,
      `Please set ${CONVEX_DEPLOY_KEY_ENV_VAR_NAME} to a new key which you can find on your Convex dashboard.`
    );
    await ctx.crash(1);
  }
  return stripDeploymentTypePrefix(parts[0]);
};
//# sourceMappingURL=api.js.map
