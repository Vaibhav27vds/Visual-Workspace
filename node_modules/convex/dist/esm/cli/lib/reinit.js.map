{
  "version": 3,
  "sources": ["../../../../src/cli/lib/reinit.ts"],
  "sourcesContent": ["import { Context, logFailure, showSpinner } from \"../../bundler/context.js\";\nimport {\n  DeploymentType,\n  fetchDeploymentCredentialsProvisioningDevOrProd,\n} from \"./api.js\";\nimport { doCodegen } from \"./codegen.js\";\nimport {\n  configName,\n  readProjectConfig,\n  upgradeOldAuthInfoToAuthConfig,\n  writeProjectConfig,\n} from \"./config.js\";\nimport { writeDeploymentEnvVar } from \"./deployment.js\";\nimport { finalizeConfiguration } from \"./init.js\";\nimport {\n  functionsDir,\n  validateOrSelectProject,\n  validateOrSelectTeam,\n} from \"./utils.js\";\n\nexport async function reinit(\n  ctx: Context,\n  deploymentType: DeploymentType = \"prod\",\n  config: {\n    team: string | null;\n    project: string | null;\n  }\n) {\n  const { teamSlug } = await validateOrSelectTeam(ctx, config.team, \"Team:\");\n\n  const projectSlug = await validateOrSelectProject(\n    ctx,\n    config.project,\n    teamSlug,\n    \"Configure project\",\n    \"Project:\"\n  );\n  if (!projectSlug) {\n    logFailure(ctx, \"Run the command again to create a new project instead.\");\n    await ctx.crash(1);\n    return;\n  }\n\n  showSpinner(ctx, `Reinitializing project ${projectSlug}...\\n`);\n\n  const { deploymentName, url, adminKey } =\n    await fetchDeploymentCredentialsProvisioningDevOrProd(\n      ctx,\n      { teamSlug, projectSlug },\n      deploymentType\n    );\n\n  const { configPath, projectConfig: existingProjectConfig } =\n    await readProjectConfig(ctx);\n\n  const functionsPath = functionsDir(configName(), existingProjectConfig);\n\n  const { wroteToGitIgnore } = await writeDeploymentEnvVar(\n    ctx,\n    deploymentType,\n    {\n      team: teamSlug,\n      project: projectSlug,\n      deploymentName: deploymentName!,\n    }\n  );\n\n  const projectConfig = await upgradeOldAuthInfoToAuthConfig(\n    ctx,\n    existingProjectConfig,\n    functionsPath\n  );\n  await writeProjectConfig(ctx, projectConfig, {\n    deleteIfAllDefault: true,\n  });\n\n  await doCodegen({\n    ctx,\n    functionsDirectoryPath: functionsDir(configPath, projectConfig),\n    typeCheckMode: \"disable\",\n    quiet: true,\n  });\n\n  await finalizeConfiguration(\n    ctx,\n    functionsDir(configPath, projectConfig),\n    deploymentType,\n    url,\n    wroteToGitIgnore\n  );\n\n  return { deploymentName, url, adminKey };\n}\n"],
  "mappings": ";AAAA,SAAkB,YAAY,mBAAmB;AACjD;AAAA,EAEE;AAAA,OACK;AACP,SAAS,iBAAiB;AAC1B;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,6BAA6B;AACtC,SAAS,6BAA6B;AACtC;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,sBAAsB,OACpB,KACA,iBAAiC,QACjC,QAIA;AACA,QAAM,EAAE,SAAS,IAAI,MAAM,qBAAqB,KAAK,OAAO,MAAM,OAAO;AAEzE,QAAM,cAAc,MAAM;AAAA,IACxB;AAAA,IACA,OAAO;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,MAAI,CAAC,aAAa;AAChB,eAAW,KAAK,wDAAwD;AACxE,UAAM,IAAI,MAAM,CAAC;AACjB;AAAA,EACF;AAEA,cAAY,KAAK,0BAA0B;AAAA,CAAkB;AAE7D,QAAM,EAAE,gBAAgB,KAAK,SAAS,IACpC,MAAM;AAAA,IACJ;AAAA,IACA,EAAE,UAAU,YAAY;AAAA,IACxB;AAAA,EACF;AAEF,QAAM,EAAE,YAAY,eAAe,sBAAsB,IACvD,MAAM,kBAAkB,GAAG;AAE7B,QAAM,gBAAgB,aAAa,WAAW,GAAG,qBAAqB;AAEtE,QAAM,EAAE,iBAAiB,IAAI,MAAM;AAAA,IACjC;AAAA,IACA;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,SAAS;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAEA,QAAM,gBAAgB,MAAM;AAAA,IAC1B;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,QAAM,mBAAmB,KAAK,eAAe;AAAA,IAC3C,oBAAoB;AAAA,EACtB,CAAC;AAED,QAAM,UAAU;AAAA,IACd;AAAA,IACA,wBAAwB,aAAa,YAAY,aAAa;AAAA,IAC9D,eAAe;AAAA,IACf,OAAO;AAAA,EACT,CAAC;AAED,QAAM;AAAA,IACJ;AAAA,IACA,aAAa,YAAY,aAAa;AAAA,IACtC;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SAAO,EAAE,gBAAgB,KAAK,SAAS;AACzC;",
  "names": []
}
