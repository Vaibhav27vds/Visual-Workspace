{
  "version": 3,
  "sources": ["../../../../src/cli/lib/api.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport {\n  bigBrainAPI,\n  bigBrainAPIMaybeThrows,\n  getAuthHeaderFromGlobalConfig,\n  getConfiguredDeploymentOrCrash,\n  logAndHandleAxiosError,\n} from \"./utils.js\";\nimport { Context, logError, logFailure } from \"../../bundler/context.js\";\nimport {\n  readDeploymentEnvVar,\n  stripDeploymentTypePrefix,\n} from \"./deployment.js\";\nimport { buildEnvironment } from \"./envvars.js\";\nimport { checkAuthorization, performLogin } from \"./login.js\";\n\nexport type DeploymentName = string;\nexport type DeploymentType = \"dev\" | \"prod\";\n\nexport type Project = {\n  id: string;\n  name: string;\n  slug: string;\n  isDemo: boolean;\n};\n\nexport const CONVEX_DEPLOY_KEY_ENV_VAR_NAME = \"CONVEX_DEPLOY_KEY\";\n\ntype AdminKey = string;\n\n// Init\n// Provision a new empty project and return the new deployment credentials.\nexport async function createProjectProvisioningDevOrProd(\n  ctx: Context,\n  {\n    teamSlug: selectedTeamSlug,\n    projectName,\n  }: { teamSlug: string; projectName: string },\n  firstDeploymentType: DeploymentType\n): Promise<{\n  projectSlug: string;\n  teamSlug: string;\n  deploymentName: string;\n  url: string;\n  adminKey: AdminKey;\n  projectsRemaining: number;\n}> {\n  const provisioningArgs = {\n    team: selectedTeamSlug,\n    projectName,\n    deploymentType: firstDeploymentType,\n    backendVersionOverride: process.env.CONVEX_BACKEND_VERSION_OVERRIDE,\n  };\n  const data = await bigBrainAPI({\n    ctx,\n    method: \"POST\",\n    url: \"create_project\",\n    data: provisioningArgs,\n  });\n  const {\n    projectSlug,\n    teamSlug,\n    deploymentName,\n    adminKey,\n    projectsRemaining,\n    prodUrl: url,\n  } = data;\n  if (\n    projectSlug === undefined ||\n    teamSlug === undefined ||\n    deploymentName === undefined ||\n    url === undefined ||\n    adminKey === undefined ||\n    projectsRemaining === undefined\n  ) {\n    const error =\n      \"Unexpected response during provisioning: \" + JSON.stringify(data);\n    logError(ctx, chalk.red(error));\n    return await ctx.crash(1, \"transient\", error);\n  }\n  return {\n    projectSlug,\n    teamSlug,\n    deploymentName,\n    url,\n    adminKey,\n    projectsRemaining,\n  };\n}\n\n// Reinit\nexport async function fetchDeploymentCredentialsProvisioningDevOrProd(\n  ctx: Context,\n  { teamSlug, projectSlug }: { teamSlug: string; projectSlug: string },\n  deploymentType: DeploymentType\n): Promise<{\n  deploymentName: string | undefined;\n  url: string;\n  adminKey: AdminKey;\n}> {\n  try {\n    return fetchDeploymentCredentialsProvisioningDevOrProdMaybeThrows(\n      ctx,\n      { teamSlug, projectSlug },\n      deploymentType\n    );\n  } catch (error) {\n    return await logAndHandleAxiosError(ctx, error);\n  }\n}\n\n// Dev\nexport async function fetchDeploymentCredentialsForName(\n  ctx: Context,\n  deploymentName: DeploymentName,\n  deploymentType: DeploymentType\n) {\n  let data;\n  try {\n    data = await bigBrainAPIMaybeThrows({\n      ctx,\n      method: \"POST\",\n      url: \"deployment/authorize_for_name\",\n      data: {\n        deploymentName,\n        deploymentType,\n      },\n    });\n  } catch (error) {\n    return { error };\n  }\n  const adminKey = data.adminKey;\n  const url = data.url;\n  if (adminKey === undefined || url === undefined) {\n    const msg = \"Unknown error during authorization: \" + JSON.stringify(data);\n    logError(ctx, chalk.red(msg));\n    return await ctx.crash(1, \"transient\", new Error(msg));\n  }\n  return { deploymentName, adminKey, url };\n}\n\nexport function readConfiguredAdminKey(\n  adminKey: string | undefined\n): string | undefined {\n  return adminKey ?? process.env[CONVEX_DEPLOY_KEY_ENV_VAR_NAME] ?? undefined;\n}\n\n// Deploy\nexport async function fetchProdDeploymentCredentials(\n  ctx: Context,\n  options: {\n    url?: string | undefined;\n    adminKey?: string | undefined;\n  }\n): Promise<{\n  url: string;\n  adminKey: AdminKey;\n  deploymentNames?: {\n    configured: string;\n    prod: string;\n  };\n}> {\n  const configuredAdminKey = readConfiguredAdminKey(options.adminKey);\n  const configuredUrl =\n    options.url ?? (await deriveUrlFromAdminKey(ctx, configuredAdminKey));\n\n  const configuredDeployment = readDeploymentEnvVar();\n\n  // Crash if we know that DEPLOY_KEY (adminKey) is required\n  if (configuredAdminKey === undefined) {\n    const buildEnvironmentExpectsConvexDeployKey = buildEnvironment();\n    if (buildEnvironmentExpectsConvexDeployKey) {\n      logFailure(\n        ctx,\n        `${buildEnvironmentExpectsConvexDeployKey} build environment detected but ${CONVEX_DEPLOY_KEY_ENV_VAR_NAME} is not set. ` +\n          `Set this environment variable to deploy from this environment. See https://docs.convex.dev/production/hosting`\n      );\n      await ctx.crash(1);\n    }\n    const header = await getAuthHeaderFromGlobalConfig(ctx);\n    if (!header) {\n      logFailure(\n        ctx,\n        `Error: You are not logged in. Log in with \\`npx convex dev\\` or set the ${CONVEX_DEPLOY_KEY_ENV_VAR_NAME} environment variable. ` +\n          `See https://docs.convex.dev/production/hosting`\n      );\n      await ctx.crash(1);\n    }\n  }\n\n  if (configuredAdminKey !== undefined && configuredUrl !== undefined) {\n    return { adminKey: configuredAdminKey, url: configuredUrl };\n  }\n\n  if (configuredDeployment === null) {\n    logFailure(\n      ctx,\n      \"No CONVEX_DEPLOYMENT set, run `npx convex dev` to configure a Convex project\"\n    );\n    return await ctx.crash(1);\n  }\n\n  const data = await bigBrainAPI({\n    ctx,\n    method: \"POST\",\n    url: \"deployment/authorize_prod\",\n    data: {\n      deploymentName: configuredDeployment,\n    },\n  });\n  const prodDeploymentName = data.deploymentName;\n  const adminKey = data.adminKey;\n  const url = data.url;\n  if (\n    adminKey === undefined ||\n    url === undefined ||\n    prodDeploymentName === undefined\n  ) {\n    const msg = \"Unknown error during authorization: \" + JSON.stringify(data);\n    logError(ctx, chalk.red(msg));\n    return await ctx.crash(1, \"transient\", new Error(msg));\n  }\n  return {\n    deploymentNames: {\n      prod: prodDeploymentName,\n      configured: configuredDeployment,\n    },\n    adminKey: configuredAdminKey ?? adminKey,\n    url: configuredUrl ?? url,\n  };\n}\n\n// Run, Import\nexport async function fetchDeploymentCredentialsProvisionProd(\n  ctx: Context,\n  options: {\n    prod?: boolean;\n    url?: string | undefined;\n    adminKey?: string | undefined;\n  }\n): Promise<{\n  url: string;\n  adminKey: AdminKey;\n  deploymentName?: string;\n}> {\n  const deploymentType = options.prod ? \"prod\" : \"dev\";\n  if (deploymentType === \"prod\") {\n    const result = await fetchProdDeploymentCredentials(ctx, options);\n    return {\n      url: result.url,\n      adminKey: result.adminKey,\n      deploymentName: result.deploymentNames?.prod,\n    };\n  }\n  const { url, adminKey } = options;\n  if (url !== undefined && adminKey !== undefined) {\n    return { url, adminKey };\n  }\n\n  if (!(await checkAuthorization(ctx, false))) {\n    await performLogin(ctx);\n  }\n\n  const configuredDeployment = await getConfiguredDeploymentOrCrash(ctx);\n  const result = await fetchExistingDeploymentCredentialsOrCrash(\n    ctx,\n    configuredDeployment,\n    deploymentType\n  );\n  return {\n    url: result.url,\n    adminKey: result.adminKey,\n    deploymentName: configuredDeployment,\n  };\n}\n\n// Dashboard\nexport async function fetchTeamAndProject(\n  ctx: Context,\n  deploymentName: string\n) {\n  const data = (await bigBrainAPI({\n    ctx,\n    method: \"GET\",\n    url: `deployment/${deploymentName}/team_and_project`,\n  })) as {\n    team: string; // slug\n    project: string; // slug\n    teamId: number;\n    projectId: number;\n  };\n\n  const { team, project } = data;\n  if (team === undefined || project === undefined) {\n    const msg =\n      \"Unknown error when fetching team and project: \" + JSON.stringify(data);\n    logFailure(ctx, msg);\n    return await ctx.crash(1, \"transient\", new Error(msg));\n  }\n\n  return data;\n}\n\n// Used by dev for upgrade from team and project in convex.json to CONVEX_DEPLOYMENT\nexport async function fetchDeploymentCredentialsProvisioningDevOrProdMaybeThrows(\n  ctx: Context,\n  { teamSlug, projectSlug }: { teamSlug: string; projectSlug: string },\n  deploymentType: DeploymentType\n): Promise<{\n  deploymentName: string | undefined;\n  url: string;\n  adminKey: AdminKey;\n}> {\n  const data = await await bigBrainAPIMaybeThrows({\n    ctx,\n    method: \"POST\",\n    url: \"deployment/provision_and_authorize\",\n    data: {\n      teamSlug,\n      projectSlug,\n      deploymentType,\n    },\n  });\n  const deploymentName = data.deploymentName;\n  const adminKey = data.adminKey;\n  const url = data.url;\n  if (adminKey === undefined || url === undefined) {\n    const msg = \"Unknown error during authorization: \" + JSON.stringify(data);\n    logError(ctx, chalk.red(msg));\n    return await ctx.crash(1, \"transient\", new Error(msg));\n  }\n  return { adminKey, url, deploymentName };\n}\n\nasync function fetchExistingDeploymentCredentialsOrCrash(\n  ctx: Context,\n  deploymentName: DeploymentName,\n  deploymentType: DeploymentType\n): Promise<{\n  url: string;\n  adminKey: AdminKey;\n}> {\n  const credentials = await fetchDeploymentCredentialsForName(\n    ctx,\n    deploymentName,\n    deploymentType\n  );\n  if (\"error\" in credentials) {\n    logFailure(\n      ctx,\n      `Failed to authorize \"${deploymentName}\" configured in CONVEX_DEPLOYMENT, run \\`npx convex dev\\` to configure a Convex project`\n    );\n    return await ctx.crash(1, \"invalid filesystem data\", credentials.error);\n  }\n  return credentials;\n}\n\n// This returns the the url of the deployment from an admin key in the format\n//      \"tall-forest-1234|1a2b35123541\"\n//   or \"prod:tall-forest-1234|1a2b35123541\"\nasync function deriveUrlFromAdminKey(\n  ctx: Context,\n  adminKey: string | undefined\n) {\n  if (!adminKey) {\n    return undefined;\n  }\n  const deploymentName = await deploymentNameFromAdminKey(ctx, adminKey);\n  return `https://${deploymentName}.convex.cloud`;\n}\n\nexport const deploymentNameFromAdminKey = async (\n  ctx: Context,\n  adminKey: string\n) => {\n  const parts = adminKey.split(\"|\");\n  if (parts.length === 1) {\n    logFailure(\n      ctx,\n      `Please set ${CONVEX_DEPLOY_KEY_ENV_VAR_NAME} to a new key which you can find on your Convex dashboard.`\n    );\n    await ctx.crash(1);\n  }\n  return stripDeploymentTypePrefix(parts[0]);\n};\n"],
  "mappings": "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",
  "names": ["result"]
}
