{
  "version": 3,
  "sources": ["../../../src/cli/configure.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport inquirer from \"inquirer\";\nimport {\n  Context,\n  logError,\n  logFailure,\n  logMessage,\n} from \"../bundler/context.js\";\nimport {\n  DeploymentType,\n  DeploymentName,\n  fetchDeploymentCredentialsForName,\n  fetchDeploymentCredentialsProvisioningDevOrProdMaybeThrows,\n} from \"./lib/api.js\";\nimport {\n  ProjectConfig,\n  enforceDeprecatedConfigField,\n  readProjectConfig,\n  upgradeOldAuthInfoToAuthConfig,\n  writeProjectConfig,\n} from \"./lib/config.js\";\nimport {\n  eraseDeploymentEnvVar,\n  writeDeploymentEnvVar,\n} from \"./lib/deployment.js\";\nimport { init } from \"./lib/init.js\";\nimport { reinit } from \"./lib/reinit.js\";\nimport {\n  functionsDir,\n  getConfiguredDeployment,\n  hasProject,\n  hasProjects,\n  hasTeam,\n  logAndHandleAxiosError,\n} from \"./lib/utils.js\";\nimport { writeConvexUrlToEnvFile } from \"./lib/envvars.js\";\n\ntype DeploymentCredentials = {\n  url: string;\n  adminKey: string;\n};\n\n// This works like running `dev --once` for the first time\n// but without a push.\n// It only exists for backwards compatibility with existing\n// scripts that used `convex init` or `convex reinit`.\nexport async function initOrReinitForDeprecatedCommands(\n  ctx: Context,\n  cmdOptions: {\n    team: string | null;\n    project: string | null;\n    url?: string | undefined;\n    adminKey?: string | undefined;\n  }\n) {\n  const { url } = await deploymentCredentialsOrConfigure(ctx, null, {\n    ...cmdOptions,\n    prod: false,\n  });\n  // Try the CONVEX_URL write again in case the user had an existing\n  // convex.json but didn't have CONVEX_URL in .env.local.\n  const envVarWrite = await writeConvexUrlToEnvFile(ctx, url);\n  if (envVarWrite !== null) {\n    logMessage(\n      ctx,\n      chalk.green(\n        `Saved the dev deployment URL as ${envVarWrite.envVar} to ${envVarWrite.envFile}`\n      )\n    );\n  }\n}\n\nexport async function deploymentCredentialsOrConfigure(\n  ctx: Context,\n  chosenConfiguration: \"new\" | \"existing\" | \"ask\" | null,\n  cmdOptions: {\n    prod: boolean;\n    team: string | null;\n    project: string | null;\n    url?: string | undefined;\n    adminKey?: string | undefined;\n  }\n): Promise<DeploymentCredentials & { deploymentName?: DeploymentName }> {\n  const { url, adminKey } = cmdOptions;\n  if (url !== undefined && adminKey !== undefined) {\n    const didErase = await eraseDeploymentEnvVar(ctx);\n    if (didErase) {\n      logMessage(\n        ctx,\n        chalk.yellowBright(\n          `Removed the CONVEX_DEPLOYMENT environment variable from .env.local`\n        )\n      );\n    }\n    const envVarWrite = await writeConvexUrlToEnvFile(ctx, url);\n    if (envVarWrite !== null) {\n      logMessage(\n        ctx,\n        chalk.green(\n          `Saved the given --url as ${envVarWrite.envVar} to ${envVarWrite.envFile}`\n        )\n      );\n    }\n    return { url, adminKey };\n  }\n  const deploymentType = cmdOptions.prod ? \"prod\" : \"dev\";\n  const configuredDeployment =\n    chosenConfiguration === null\n      ? await getConfiguredDeploymentOrUpgrade(ctx, deploymentType)\n      : null;\n  // No configured deployment NOR existing config\n  if (configuredDeployment === null) {\n    const choice =\n      chosenConfiguration !== \"ask\" && chosenConfiguration !== null\n        ? chosenConfiguration\n        : await askToConfigure(ctx);\n    return await initOrReinit(ctx, choice, deploymentType, cmdOptions);\n  }\n  // Existing config but user doesn't have access to it\n  if (\"error\" in configuredDeployment) {\n    const projectConfig = (await readProjectConfig(ctx)).projectConfig;\n    const choice = await askToReconfigure(\n      ctx,\n      projectConfig,\n      configuredDeployment.error\n    );\n    return initOrReinit(ctx, choice, deploymentType, cmdOptions);\n  }\n  const { deploymentName } = configuredDeployment;\n  const adminKeyAndUrlForConfiguredDeployment =\n    await fetchDeploymentCredentialsForName(\n      ctx,\n      deploymentName,\n      deploymentType\n    );\n  // Configured deployment and user has access\n  if (!(\"error\" in adminKeyAndUrlForConfiguredDeployment)) {\n    return adminKeyAndUrlForConfiguredDeployment;\n  }\n  await checkForDeploymentTypeError(\n    ctx,\n    adminKeyAndUrlForConfiguredDeployment.error,\n    deploymentType\n  );\n\n  // Configured deployment and user doesn't has access to it\n  const choice = await askToReconfigureNew(ctx, deploymentName);\n  return initOrReinit(ctx, choice, deploymentType, cmdOptions);\n}\n\nasync function checkForDeploymentTypeError(\n  ctx: Context,\n  error: unknown,\n  deploymentType: DeploymentType\n) {\n  if ((error as any).response?.data?.code === \"DeploymentTypeMismatch\") {\n    if (deploymentType === \"prod\") {\n      logFailure(\n        ctx,\n        \"Use `npx convex deploy` to push changes to your production deployment\"\n      );\n    } else {\n      logFailure(\n        ctx,\n        \"CONVEX_DEPLOYMENT is a production deployment, but --prod flag was not specified. \" +\n          \"Use `npx convex dev --prod` to develop against this production deployment.\"\n      );\n    }\n    logError(ctx, chalk.red((error as any).response.data.message));\n    await ctx.crash(1, \"invalid filesystem data\", error);\n  }\n}\n\nasync function getConfiguredDeploymentOrUpgrade(\n  ctx: Context,\n  deploymentType: DeploymentType\n) {\n  const deploymentName = await getConfiguredDeployment(ctx);\n  if (deploymentName !== null) {\n    return { deploymentName };\n  }\n  return await upgradeOldConfigToDeploymentVar(ctx, deploymentType);\n}\n\nasync function initOrReinit(\n  ctx: Context,\n  choice: \"new\" | \"existing\",\n  deploymentType: DeploymentType,\n  cmdOptions: { team: string | null; project: string | null }\n): Promise<DeploymentCredentials> {\n  switch (choice) {\n    case \"new\":\n      return (await init(ctx, deploymentType, cmdOptions))!;\n    case \"existing\": {\n      return (await reinit(ctx, deploymentType, cmdOptions))!;\n    }\n    default: {\n      return choice;\n    }\n  }\n}\n\nasync function upgradeOldConfigToDeploymentVar(\n  ctx: Context,\n  deploymentType: DeploymentType\n): Promise<{ deploymentName: string } | { error: unknown } | null> {\n  const { configPath, projectConfig } = await readProjectConfig(ctx);\n  const { team, project } = projectConfig;\n  if (typeof team !== \"string\" || typeof project !== \"string\") {\n    // The config is not a valid old config, proceed to init/reinit\n    return null;\n  }\n  let devDeploymentName;\n  try {\n    const { deploymentName } =\n      await fetchDeploymentCredentialsProvisioningDevOrProdMaybeThrows(\n        ctx,\n        { teamSlug: team, projectSlug: project },\n        deploymentType\n      );\n    devDeploymentName = deploymentName!;\n  } catch (error) {\n    // Could not retrieve the deployment name using the old config, proceed to reconfigure\n    return { error };\n  }\n  await writeDeploymentEnvVar(ctx, deploymentType, {\n    team,\n    project,\n    deploymentName: devDeploymentName,\n  });\n  logMessage(\n    ctx,\n    chalk.green(\n      `Saved the ${deploymentType} deployment name as CONVEX_DEPLOYMENT to .env.local`\n    )\n  );\n  const projectConfigWithoutAuthInfo = await upgradeOldAuthInfoToAuthConfig(\n    ctx,\n    projectConfig,\n    functionsDir(configPath, projectConfig)\n  );\n  await writeProjectConfig(ctx, projectConfigWithoutAuthInfo, {\n    deleteIfAllDefault: true,\n  });\n  return { deploymentName: devDeploymentName };\n}\n\nasync function askToConfigure(ctx: Context): Promise<\"new\" | \"existing\"> {\n  if (!(await hasProjects(ctx))) {\n    return \"new\";\n  }\n  return await promptToInitWithProjects();\n}\n\nasync function askToReconfigure(\n  ctx: Context,\n  projectConfig: ProjectConfig,\n  error: unknown\n): Promise<\"new\" | \"existing\"> {\n  const team = await enforceDeprecatedConfigField(ctx, projectConfig, \"team\");\n  const project = await enforceDeprecatedConfigField(\n    ctx,\n    projectConfig,\n    \"project\"\n  );\n  const [isExistingTeam, existingProject, hasAnyProjects] = await Promise.all([\n    await hasTeam(ctx, team),\n    await hasProject(ctx, team, project),\n    await hasProjects(ctx),\n  ]);\n\n  // The config is good so there must be something else going on,\n  // fatal with the original error\n  if (isExistingTeam && existingProject) {\n    return await logAndHandleAxiosError(ctx, error);\n  }\n\n  if (isExistingTeam) {\n    logFailure(\n      ctx,\n      `Project ${chalk.bold(project)} does not exist in your team ${chalk.bold(\n        team\n      )}, as configured in ${chalk.bold(\"convex.json\")}`\n    );\n  } else {\n    logFailure(\n      ctx,\n      `You don't have access to team ${chalk.bold(\n        team\n      )}, as configured in ${chalk.bold(\"convex.json\")}`\n    );\n  }\n  if (!hasAnyProjects) {\n    const { confirmed } = await inquirer.prompt([\n      {\n        type: \"confirm\",\n        name: \"confirmed\",\n        message: `Create a new project?`,\n        default: true,\n      },\n    ]);\n    if (!confirmed) {\n      logFailure(\n        ctx,\n        \"Run `npx convex dev` in a directory with a valid convex.json.\"\n      );\n      return await ctx.crash(1, \"invalid filesystem data\");\n    }\n    return \"new\";\n  }\n\n  return await promptToReconfigure();\n}\n\nasync function askToReconfigureNew(\n  ctx: Context,\n  configuredDeploymentName: DeploymentName\n): Promise<\"new\" | \"existing\"> {\n  logFailure(\n    ctx,\n    `You don't have access to the project with deployment ${chalk.bold(\n      configuredDeploymentName\n    )}, as configured in ${chalk.bold(\"CONVEX_DEPLOYMENT\")}`\n  );\n\n  const hasAnyProjects = await hasProjects(ctx);\n\n  if (!hasAnyProjects) {\n    const { confirmed } = await inquirer.prompt([\n      {\n        type: \"confirm\",\n        name: \"confirmed\",\n        message: `Configure a new project?`,\n        default: true,\n      },\n    ]);\n    if (!confirmed) {\n      logFailure(\n        ctx,\n        \"Run `npx convex dev` in a directory with a valid CONVEX_DEPLOYMENT set\"\n      );\n      return await ctx.crash(1, \"invalid filesystem data\");\n    }\n    return \"new\";\n  }\n\n  return await promptToReconfigure();\n}\n\nexport async function promptToInitWithProjects(): Promise<\"new\" | \"existing\"> {\n  const { choice } = await inquirer.prompt([\n    {\n      type: \"list\",\n      name: \"choice\",\n      message: `What would you like to configure?`,\n      default: \"new\",\n      choices: [\n        { name: \"a new project\", value: \"new\" },\n        { name: \"an existing project\", value: \"existing\" },\n      ],\n    },\n  ]);\n  return choice;\n}\n\nexport async function promptToReconfigure(): Promise<\"new\" | \"existing\"> {\n  const { choice } = await inquirer.prompt([\n    {\n      type: \"list\",\n      name: \"choice\",\n      message: `Configure a different project?`,\n      default: \"new\",\n      choices: [\n        { name: \"create new project\", value: \"new\" },\n        { name: \"choose an existing project\", value: \"existing\" },\n      ],\n    },\n  ]);\n  return choice;\n}\n"],
  "mappings": "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",
  "names": ["choice"]
}
