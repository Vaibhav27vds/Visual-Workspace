{
  "version": 3,
  "sources": ["../../../../src/server/impl/actions_impl.ts"],
  "sourcesContent": ["import { convexToJson, jsonToConvex, Value } from \"../../values/index.js\";\nimport { version } from \"../../index.js\";\nimport { performAsyncSyscall } from \"./syscall.js\";\nimport { parseArgs } from \"../../common/index.js\";\nimport { FunctionReference, getFunctionName } from \"../../server/api.js\";\n\nexport function setupActionCalls(requestId: string) {\n  return {\n    runQuery: async (\n      query: FunctionReference<\"query\", \"public\" | \"internal\">,\n      args?: Record<string, Value>\n    ): Promise<any> => {\n      const name = getFunctionName(query);\n      const queryArgs = parseArgs(args);\n      const syscallArgs = {\n        name,\n        args: convexToJson(queryArgs),\n        version,\n        requestId,\n      };\n      const result = await performAsyncSyscall(\n        \"1.0/actions/query\",\n        syscallArgs\n      );\n      return jsonToConvex(result, false);\n    },\n    runMutation: async (\n      mutation: FunctionReference<\"mutation\", \"public\" | \"internal\">,\n      args?: Record<string, Value>\n    ): Promise<any> => {\n      const name = getFunctionName(mutation);\n      const mutationArgs = parseArgs(args);\n      const syscallArgs = {\n        name,\n        args: convexToJson(mutationArgs),\n        version,\n        requestId,\n      };\n      const result = await performAsyncSyscall(\n        \"1.0/actions/mutation\",\n        syscallArgs\n      );\n      return jsonToConvex(result, false);\n    },\n    runAction: async (\n      action: FunctionReference<\"action\", \"public\" | \"internal\">,\n      args?: Record<string, Value>\n    ): Promise<any> => {\n      const name = getFunctionName(action);\n      const actionArgs = parseArgs(args);\n      const syscallArgs = {\n        name,\n        args: convexToJson(actionArgs),\n        version,\n        requestId,\n      };\n      const result = await performAsyncSyscall(\n        \"1.0/actions/action\",\n        syscallArgs\n      );\n      return jsonToConvex(result, false);\n    },\n  };\n}\n"],
  "mappings": ";AAAA,SAAS,cAAc,oBAA2B;AAClD,SAAS,eAAe;AACxB,SAAS,2BAA2B;AACpC,SAAS,iBAAiB;AAC1B,SAA4B,uBAAuB;AAE5C,gBAAS,iBAAiB,WAAmB;AAClD,SAAO;AAAA,IACL,UAAU,OACR,OACA,SACiB;AACjB,YAAM,OAAO,gBAAgB,KAAK;AAClC,YAAM,YAAY,UAAU,IAAI;AAChC,YAAM,cAAc;AAAA,QAClB;AAAA,QACA,MAAM,aAAa,SAAS;AAAA,QAC5B;AAAA,QACA;AAAA,MACF;AACA,YAAM,SAAS,MAAM;AAAA,QACnB;AAAA,QACA;AAAA,MACF;AACA,aAAO,aAAa,QAAQ,KAAK;AAAA,IACnC;AAAA,IACA,aAAa,OACX,UACA,SACiB;AACjB,YAAM,OAAO,gBAAgB,QAAQ;AACrC,YAAM,eAAe,UAAU,IAAI;AACnC,YAAM,cAAc;AAAA,QAClB;AAAA,QACA,MAAM,aAAa,YAAY;AAAA,QAC/B;AAAA,QACA;AAAA,MACF;AACA,YAAM,SAAS,MAAM;AAAA,QACnB;AAAA,QACA;AAAA,MACF;AACA,aAAO,aAAa,QAAQ,KAAK;AAAA,IACnC;AAAA,IACA,WAAW,OACT,QACA,SACiB;AACjB,YAAM,OAAO,gBAAgB,MAAM;AACnC,YAAM,aAAa,UAAU,IAAI;AACjC,YAAM,cAAc;AAAA,QAClB;AAAA,QACA,MAAM,aAAa,UAAU;AAAA,QAC7B;AAAA,QACA;AAAA,MACF;AACA,YAAM,SAAS,MAAM;AAAA,QACnB;AAAA,QACA;AAAA,MACF;AACA,aAAO,aAAa,QAAQ,KAAK;AAAA,IACnC;AAAA,EACF;AACF;",
  "names": []
}
