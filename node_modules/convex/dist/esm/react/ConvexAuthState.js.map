{
  "version": 3,
  "sources": ["../../../src/react/ConvexAuthState.tsx"],
  "sourcesContent": ["import React, {\n  createContext,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { AuthTokenFetcher } from \"../browser/sync/client.js\";\nimport { ConvexProvider } from \"./client.js\";\n\n// Until we can import from our own entry points (requires TypeScript 4.7),\n// just describe the interface enough to help users pass the right type.\ntype IConvexReactClient = {\n  setAuth(\n    fetchToken: AuthTokenFetcher,\n    onChange: (isAuthenticated: boolean) => void\n  ): void;\n  clearAuth(): void;\n};\n\n/**\n * Type representing the state of an auth integration with Convex.\n *\n * @public\n */\nexport type ConvexAuthState = {\n  isLoading: boolean;\n  isAuthenticated: boolean;\n};\n\nconst ConvexAuthContext = createContext<ConvexAuthState>(undefined as any);\n\n/**\n * Get the {@link ConvexAuthState} within a React component.\n *\n * This relies on a Convex auth integration provider being above in the React\n * component tree.\n *\n * @returns The current {@link ConvexAuthState}.\n *\n * @public\n */\nexport function useConvexAuth(): {\n  isLoading: boolean;\n  isAuthenticated: boolean;\n} {\n  const authContext = useContext(ConvexAuthContext);\n  if (authContext === undefined) {\n    throw new Error(\n      \"Could not find `ConvexProviderWithAuth` (or `ConvexProviderWithClerk` \" +\n        \"or `ConvexProviderWithAuth0`) \" +\n        \"as an ancestor component. This component may be missing, or you \" +\n        \"might have two instances of the `convex/react` module loaded in your \" +\n        \"project.\"\n    );\n  }\n  return authContext;\n}\n\n/**\n * A replacement for {@link ConvexProvider} which additionally provides\n * {@link ConvexAuthState} to descendants of this component.\n *\n * Use this to integrate any auth provider with Convex. The `useAuth` prop\n * should be a React hook that returns the provider's authentication state\n * and a function to fetch a JWT access token.\n *\n * See [Custom Auth Integration](https://docs.convex.dev/auth/custom-auth) for more information.\n *\n * @public\n */\nexport function ConvexProviderWithAuth({\n  children,\n  client,\n  useAuth,\n}: {\n  children?: ReactNode;\n  client: IConvexReactClient;\n  useAuth: () => {\n    isLoading: boolean;\n    isAuthenticated: boolean;\n    fetchAccessToken: (args: {\n      forceRefreshToken: boolean;\n    }) => Promise<string | null>;\n  };\n}) {\n  const { isLoading, isAuthenticated, fetchAccessToken } = useAuth();\n  const [isConvexAuthenticated, setIsConvexAuthenticated] = useState<\n    boolean | null\n  >(null);\n\n  useEffect(() => {\n    let isThisEffectRelevant = true;\n\n    async function setToken() {\n      client.setAuth(fetchAccessToken, (isAuthenticated) => {\n        if (isThisEffectRelevant) {\n          setIsConvexAuthenticated(isAuthenticated);\n        }\n      });\n    }\n\n    if (isAuthenticated) {\n      void setToken();\n      return () => {\n        isThisEffectRelevant = false;\n\n        // If we haven't finished fetching the token by now\n        // we shouldn't transition to a loaded state\n        setIsConvexAuthenticated((isConvexAuthenticated) =>\n          isConvexAuthenticated ? false : null\n        );\n        client.clearAuth();\n      };\n    }\n  }, [isAuthenticated, fetchAccessToken, isLoading, client]);\n\n  // If the useAuth went back to the loading state (which is unusual but possible)\n  // reset the Convex auth state to null so that we can correctly\n  // transition the state from \"loading\" to \"authenticated\"\n  // without going through \"unauthenticated\".\n  if (isLoading && isConvexAuthenticated !== null) {\n    setIsConvexAuthenticated(null);\n  }\n\n  if (!isLoading && !isAuthenticated && isConvexAuthenticated !== false) {\n    setIsConvexAuthenticated(false);\n  }\n\n  return (\n    <ConvexAuthContext.Provider\n      value={{\n        isLoading: isConvexAuthenticated === null,\n        isAuthenticated: isAuthenticated && (isConvexAuthenticated ?? false),\n      }}\n    >\n      <ConvexProvider client={client as any}>{children}</ConvexProvider>\n    </ConvexAuthContext.Provider>\n  );\n}\n"],
  "mappings": ";AAAA,OAAO;AAAA,EACL;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,SAAS,sBAAsB;AAsB/B,MAAM,oBAAoB,cAA+B,MAAgB;AAYlE,gBAAS,gBAGd;AACA,QAAM,cAAc,WAAW,iBAAiB;AAChD,MAAI,gBAAgB,QAAW;AAC7B,UAAM,IAAI;AAAA,MACR;AAAA,IAKF;AAAA,EACF;AACA,SAAO;AACT;AAcO,gBAAS,uBAAuB;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AACF,GAUG;AACD,QAAM,EAAE,WAAW,iBAAiB,iBAAiB,IAAI,QAAQ;AACjE,QAAM,CAAC,uBAAuB,wBAAwB,IAAI,SAExD,IAAI;AAEN,YAAU,MAAM;AACd,QAAI,uBAAuB;AAE3B,mBAAe,WAAW;AACxB,aAAO,QAAQ,kBAAkB,CAACA,qBAAoB;AACpD,YAAI,sBAAsB;AACxB,mCAAyBA,gBAAe;AAAA,QAC1C;AAAA,MACF,CAAC;AAAA,IACH;AAEA,QAAI,iBAAiB;AACnB,WAAK,SAAS;AACd,aAAO,MAAM;AACX,+BAAuB;AAIvB;AAAA,UAAyB,CAACC,2BACxBA,yBAAwB,QAAQ;AAAA,QAClC;AACA,eAAO,UAAU;AAAA,MACnB;AAAA,IACF;AAAA,EACF,GAAG,CAAC,iBAAiB,kBAAkB,WAAW,MAAM,CAAC;AAMzD,MAAI,aAAa,0BAA0B,MAAM;AAC/C,6BAAyB,IAAI;AAAA,EAC/B;AAEA,MAAI,CAAC,aAAa,CAAC,mBAAmB,0BAA0B,OAAO;AACrE,6BAAyB,KAAK;AAAA,EAChC;AAEA,SACE;AAAA,IAAC,kBAAkB;AAAA,IAAlB;AAAA,MACC,OAAO;AAAA,QACL,WAAW,0BAA0B;AAAA,QACrC,iBAAiB,oBAAoB,yBAAyB;AAAA,MAChE;AAAA;AAAA,IAEA,oCAAC,kBAAe,UAAwB,QAAS;AAAA,EACnD;AAEJ;",
  "names": ["isAuthenticated", "isConvexAuthenticated"]
}
