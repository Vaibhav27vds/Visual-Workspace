import { Context } from "../../bundler/context.js";
export type DeploymentName = string;
export type DeploymentType = "dev" | "prod";
export type Project = {
    id: string;
    name: string;
    slug: string;
    isDemo: boolean;
};
export declare const CONVEX_DEPLOY_KEY_ENV_VAR_NAME = "CONVEX_DEPLOY_KEY";
type AdminKey = string;
export declare function createProjectProvisioningDevOrProd(ctx: Context, { teamSlug: selectedTeamSlug, projectName, }: {
    teamSlug: string;
    projectName: string;
}, firstDeploymentType: DeploymentType): Promise<{
    projectSlug: string;
    teamSlug: string;
    deploymentName: string;
    url: string;
    adminKey: AdminKey;
    projectsRemaining: number;
}>;
export declare function fetchDeploymentCredentialsProvisioningDevOrProd(ctx: Context, { teamSlug, projectSlug }: {
    teamSlug: string;
    projectSlug: string;
}, deploymentType: DeploymentType): Promise<{
    deploymentName: string | undefined;
    url: string;
    adminKey: AdminKey;
}>;
export declare function fetchDeploymentCredentialsForName(ctx: Context, deploymentName: DeploymentName, deploymentType: DeploymentType): Promise<{
    error: unknown;
    deploymentName?: undefined;
    adminKey?: undefined;
    url?: undefined;
} | {
    deploymentName: string;
    adminKey: any;
    url: any;
    error?: undefined;
}>;
export declare function readConfiguredAdminKey(adminKey: string | undefined): string | undefined;
export declare function fetchProdDeploymentCredentials(ctx: Context, options: {
    url?: string | undefined;
    adminKey?: string | undefined;
}): Promise<{
    url: string;
    adminKey: AdminKey;
    deploymentNames?: {
        configured: string;
        prod: string;
    };
}>;
export declare function fetchDeploymentCredentialsProvisionProd(ctx: Context, options: {
    prod?: boolean;
    url?: string | undefined;
    adminKey?: string | undefined;
}): Promise<{
    url: string;
    adminKey: AdminKey;
    deploymentName?: string;
}>;
export declare function fetchTeamAndProject(ctx: Context, deploymentName: string): Promise<{
    team: string;
    project: string;
    teamId: number;
    projectId: number;
}>;
export declare function fetchDeploymentCredentialsProvisioningDevOrProdMaybeThrows(ctx: Context, { teamSlug, projectSlug }: {
    teamSlug: string;
    projectSlug: string;
}, deploymentType: DeploymentType): Promise<{
    deploymentName: string | undefined;
    url: string;
    adminKey: AdminKey;
}>;
export declare const deploymentNameFromAdminKey: (ctx: Context, adminKey: string) => Promise<string>;
export {};
//# sourceMappingURL=api.d.ts.map