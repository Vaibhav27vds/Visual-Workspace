{
  "version": 3,
  "sources": ["../../../src/server/authentication.ts"],
  "sourcesContent": ["/**\n * Information about an authenticated user.\n *\n * The only fields guaranteed to be present are\n * {@link UserIdentity.tokenIdentifier} and {@link UserIdentity.issuer}. All\n * remaining fields may or may not be present depending on the information given\n * by the identity provider.\n *\n * See the [OpenID Connect specification](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims)\n * for more information on these fields.\n *\n * @public\n */\nexport interface UserIdentity {\n  /**\n   * A stable and globally unique string for this identity (i.e. no other\n   * user, even from a different identity provider, will have the same string.)\n   */\n  readonly tokenIdentifier: string;\n\n  /**\n   * Identifier for the end-user from the identity provider, not necessarily\n   * unique across different providers.\n   */\n  readonly subject: string;\n\n  /**\n   * The hostname of the identity provider used to authenticate this user.\n   */\n  readonly issuer: string;\n  readonly name?: string;\n  readonly givenName?: string;\n  readonly familyName?: string;\n  readonly nickname?: string;\n  readonly preferredUsername?: string;\n  readonly profileUrl?: string;\n  readonly pictureUrl?: string;\n  readonly email?: string;\n  readonly emailVerified?: boolean;\n  readonly gender?: string;\n  readonly birthday?: string;\n  readonly timezone?: string;\n  readonly language?: string;\n  readonly phoneNumber?: string;\n  readonly phoneNumberVerified?: boolean;\n  readonly address?: string;\n  readonly updatedAt?: string;\n}\n\n/**\n * An interface to access information about the currently authenticated user\n * within Convex query and mutation functions.\n *\n * @public\n */\nexport interface Auth {\n  /**\n   * Get details about the currently authenticated user.\n   *\n   * @returns A promise that resolves to a {@link UserIdentity} if the Convex\n   * client was configured with a valid ID token and `null` otherwise.\n   */\n  getUserIdentity(): Promise<UserIdentity | null>;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
