{
  "version": 3,
  "sources": ["../../../../src/server/impl/database_impl.ts"],
  "sourcesContent": ["import {\n  convexToJson,\n  GenericId,\n  jsonToConvex,\n  Value,\n} from \"../../values/index.js\";\nimport { performAsyncSyscall, performSyscall } from \"./syscall.js\";\nimport { GenericDatabaseReader, GenericDatabaseWriter } from \"../database.js\";\nimport { QueryInitializerImpl } from \"./query_impl.js\";\nimport { GenericDataModel, GenericDocument } from \"../data_model.js\";\nimport { validateArg } from \"./validate.js\";\nimport { version } from \"../../index.js\";\nimport { patchValueToJson } from \"../../values/value.js\";\n\nexport function setupReader(): GenericDatabaseReader<GenericDataModel> {\n  const reader = (\n    isSystem = false\n  ): GenericDatabaseReader<GenericDataModel> => {\n    return {\n      get: async (id: GenericId<string>) => {\n        validateArg(id, 1, \"get\", \"id\");\n        if (typeof id !== \"string\") {\n          throw new Error(\n            `Invalid argument \\`id\\` for \\`db.get\\`, expected string but got '${typeof id}': ${\n              id as any\n            }`\n          );\n        }\n        const args = {\n          id: convexToJson(id),\n          isSystem,\n          version,\n        };\n        const syscallJSON = await performAsyncSyscall(\"1.0/get\", args);\n\n        return jsonToConvex(syscallJSON, true) as GenericDocument;\n      },\n      query: (tableName: string) => {\n        const accessingSystemTable = tableName.startsWith(\"_\");\n        if (accessingSystemTable !== isSystem) {\n          throw new Error(\n            `${\n              accessingSystemTable ? \"System\" : \"User\"\n            } tables can only be accessed from db.${\n              isSystem ? \"\" : \"system.\"\n            }query().`\n          );\n        }\n        return new QueryInitializerImpl(tableName);\n      },\n      normalizeId: <TableName extends string>(\n        tableName: TableName,\n        id: string\n      ): GenericId<TableName> | null => {\n        validateArg(tableName, 1, \"normalizeId\", \"tableName\");\n        validateArg(id, 2, \"normalizeId\", \"id\");\n        const accessingSystemTable = tableName.startsWith(\"_\");\n        if (accessingSystemTable !== isSystem) {\n          throw new Error(\n            `${\n              accessingSystemTable ? \"System\" : \"User\"\n            } tables can only be accessed from db.${\n              isSystem ? \"\" : \"system.\"\n            }normalizeId().`\n          );\n        }\n        const syscallJSON = performSyscall(\"1.0/db/normalizeId\", {\n          table: tableName,\n          idString: id,\n        });\n        const syscallResult = jsonToConvex(syscallJSON, false) as any;\n        return syscallResult.id;\n      },\n      // We set the system reader on the next line\n      system: null as any,\n    };\n  };\n  const { system: _, ...rest } = reader(true);\n  const r = reader();\n  r.system = rest;\n  return r;\n}\n\nexport function setupWriter(): GenericDatabaseWriter<GenericDataModel> {\n  const reader = setupReader();\n  return {\n    get: reader.get,\n    query: reader.query,\n    normalizeId: reader.normalizeId,\n    system: reader.system,\n    insert: async (table, value) => {\n      if (table.startsWith(\"_\")) {\n        throw new Error(\"System tables (prefixed with `_`) are read-only.\");\n      }\n      validateArg(table, 1, \"insert\", \"table\");\n      validateArg(value, 2, \"insert\", \"value\");\n      const syscallJSON = await performAsyncSyscall(\"1.0/insert\", {\n        table,\n        value: convexToJson(value),\n      });\n      const syscallResult = jsonToConvex(syscallJSON, false) as any;\n      return syscallResult._id;\n    },\n    patch: async (id, value) => {\n      validateArg(id, 1, \"patch\", \"id\");\n      validateArg(value, 2, \"patch\", \"value\");\n      await performAsyncSyscall(\"1.0/shallowMerge\", {\n        id: convexToJson(id),\n        value: patchValueToJson(value as Value),\n      });\n    },\n    replace: async (id, value) => {\n      validateArg(id, 1, \"replace\", \"id\");\n      validateArg(value, 2, \"replace\", \"value\");\n      await performAsyncSyscall(\"1.0/replace\", {\n        id: convexToJson(id),\n        value: convexToJson(value),\n      });\n    },\n    delete: async (id) => {\n      validateArg(id, 1, \"delete\", \"id\");\n      await performAsyncSyscall(\"1.0/remove\", { id: convexToJson(id) });\n    },\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
