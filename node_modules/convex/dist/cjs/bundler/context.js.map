{
  "version": 3,
  "sources": ["../../../src/bundler/context.ts"],
  "sourcesContent": ["import * as Sentry from \"@sentry/node\";\nimport chalk from \"chalk\";\nimport ora, { Ora } from \"ora\";\nimport { Filesystem, nodeFs } from \"./fs.js\";\n\n// How the error should be handled when running `npx convex dev`.\nexport type ErrorType =\n  // The error was likely caused by the state of the developer's local\n  // file system (e.g. `tsc` fails due to a syntax error). The `convex dev`\n  // command will then print out the error and wait for the file to change before\n  // retrying.\n  | \"invalid filesystem data\"\n  // The error was caused by either the local state (ie schema.ts content)\n  // or the state of the db (ie documents not matching the new schema).\n  // The `convex dev` command will wait for either file OR table data change\n  // to retry (if a table name is specified as the value in this Object).\n  | {\n      \"invalid filesystem or db data\": string | null;\n    }\n  // The error was caused by either the local state (ie schema.ts content)\n  // or the state of the deployment environment variables.\n  // The `convex dev` command will wait for either file OR env var change\n  // before retrying.\n  | \"invalid filesystem or env vars\"\n  // The error was some transient issue (e.g. a network\n  // error). This will then cause a retry after an exponential backoff.\n  | \"transient\"\n  // This error is truly permanent. Exit `npx convex dev` because the\n  // developer will need to take a manual commandline action.\n  | \"fatal\";\n\nexport interface Context {\n  fs: Filesystem;\n  deprecationMessagePrinted: boolean;\n  spinner: Ora | undefined;\n  // Reports to Sentry and either throws FatalError or exits the process.\n  // Does not print the error.\n  crash(exitCode: number, errorType?: ErrorType, err?: any): Promise<never>;\n}\n\nexport const oneoffContext: Context = {\n  fs: nodeFs,\n  deprecationMessagePrinted: false,\n  spinner: undefined,\n  async crash(exitCode: number, _errorType?: ErrorType, err?: any) {\n    return await flushAndExit(exitCode, err);\n  },\n};\n\nasync function flushAndExit(exitCode: number, err?: any) {\n  if (err) {\n    Sentry.captureException(err);\n  }\n  await Sentry.close();\n  // eslint-disable-next-line no-restricted-syntax\n  return process.exit(exitCode);\n}\n\n// Handles clearing spinner so that it doesn't get messed up\nexport function logError(ctx: Context, message: string) {\n  ctx.spinner?.clear();\n  console.error(message);\n}\n\n// Handles clearing spinner so that it doesn't get messed up\nexport function logWarning(ctx: Context, message: string) {\n  ctx.spinner?.clear();\n  console.error(message);\n}\n\n// Handles clearing spinner so that it doesn't get messed up\nexport function logMessage(ctx: Context, ...logged: any) {\n  ctx.spinner?.clear();\n  console.error(...logged);\n}\n\n// For the rare case writing output to stdout. Status and error messages\n// (logMesage, logWarning, etc.) should be written to stderr.\nexport function logOutput(ctx: Context, ...logged: any) {\n  ctx.spinner?.clear();\n  console.log(...logged);\n}\n\n// Start a spinner.\n// To change its message use changeSpinner.\n// To print warnings/erros while it's running use logError or logWarning.\n// To stop it due to an error use logFailure.\n// To stop it due to success use logFinishedStep.\nexport function showSpinner(ctx: Context, message: string) {\n  ctx.spinner?.stop();\n  ctx.spinner = ora({\n    // Add newline to prevent clobbering when a message\n    // we can't pipe through `logMessage` et al gets printed\n    text: message + \"\\n\",\n    stream: process.stderr,\n  }).start();\n}\n\nexport function changeSpinner(ctx: Context, message: string) {\n  if (ctx.spinner) {\n    // Add newline to prevent clobbering\n    ctx.spinner.text = message + \"\\n\";\n  } else {\n    console.error(message);\n  }\n}\n\nexport function logFailure(ctx: Context, message: string) {\n  if (ctx.spinner) {\n    ctx.spinner.fail(message);\n    ctx.spinner = undefined;\n  } else {\n    console.error(`${chalk.red(`\u2716`)} ${message}`);\n  }\n}\n\n// Stops and removes spinner if one is active\nexport function logFinishedStep(ctx: Context, message: string) {\n  if (ctx.spinner) {\n    ctx.spinner.succeed(message);\n    ctx.spinner = undefined;\n  } else {\n    console.error(`${chalk.green(`\u2714`)} ${message}`);\n  }\n}\n\nexport function stopSpinner(ctx: Context) {\n  if (ctx.spinner) {\n    ctx.spinner.stop();\n    ctx.spinner = undefined;\n  }\n}\n\n// Only shows the spinner if the async `fn` takes longer than `delayMs`\nexport async function showSpinnerIfSlow(\n  ctx: Context,\n  message: string,\n  delayMs: number,\n  fn: () => Promise<any>\n) {\n  const timeout = setTimeout(() => {\n    showSpinner(ctx, message);\n  }, delayMs);\n  await fn();\n  clearTimeout(timeout);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwB;AACxB,mBAAkB;AAClB,iBAAyB;AACzB,gBAAmC;AAqC5B,MAAM,gBAAyB;AAAA,EACpC,IAAI;AAAA,EACJ,2BAA2B;AAAA,EAC3B,SAAS;AAAA,EACT,MAAM,MAAM,UAAkB,YAAwB,KAAW;AAC/D,WAAO,MAAM,aAAa,UAAU,GAAG;AAAA,EACzC;AACF;AAEA,eAAe,aAAa,UAAkB,KAAW;AACvD,MAAI,KAAK;AACP,WAAO,iBAAiB,GAAG;AAAA,EAC7B;AACA,QAAM,OAAO,MAAM;AAEnB,SAAO,QAAQ,KAAK,QAAQ;AAC9B;AAGO,SAAS,SAAS,KAAc,SAAiB;AACtD,MAAI,SAAS,MAAM;AACnB,UAAQ,MAAM,OAAO;AACvB;AAGO,SAAS,WAAW,KAAc,SAAiB;AACxD,MAAI,SAAS,MAAM;AACnB,UAAQ,MAAM,OAAO;AACvB;AAGO,SAAS,WAAW,QAAiB,QAAa;AACvD,MAAI,SAAS,MAAM;AACnB,UAAQ,MAAM,GAAG,MAAM;AACzB;AAIO,SAAS,UAAU,QAAiB,QAAa;AACtD,MAAI,SAAS,MAAM;AACnB,UAAQ,IAAI,GAAG,MAAM;AACvB;AAOO,SAAS,YAAY,KAAc,SAAiB;AACzD,MAAI,SAAS,KAAK;AAClB,MAAI,cAAU,WAAAA,SAAI;AAAA;AAAA;AAAA,IAGhB,MAAM,UAAU;AAAA,IAChB,QAAQ,QAAQ;AAAA,EAClB,CAAC,EAAE,MAAM;AACX;AAEO,SAAS,cAAc,KAAc,SAAiB;AAC3D,MAAI,IAAI,SAAS;AAEf,QAAI,QAAQ,OAAO,UAAU;AAAA,EAC/B,OAAO;AACL,YAAQ,MAAM,OAAO;AAAA,EACvB;AACF;AAEO,SAAS,WAAW,KAAc,SAAiB;AACxD,MAAI,IAAI,SAAS;AACf,QAAI,QAAQ,KAAK,OAAO;AACxB,QAAI,UAAU;AAAA,EAChB,OAAO;AACL,YAAQ,MAAM,GAAG,aAAAC,QAAM,IAAI,QAAG,KAAK,SAAS;AAAA,EAC9C;AACF;AAGO,SAAS,gBAAgB,KAAc,SAAiB;AAC7D,MAAI,IAAI,SAAS;AACf,QAAI,QAAQ,QAAQ,OAAO;AAC3B,QAAI,UAAU;AAAA,EAChB,OAAO;AACL,YAAQ,MAAM,GAAG,aAAAA,QAAM,MAAM,QAAG,KAAK,SAAS;AAAA,EAChD;AACF;AAEO,SAAS,YAAY,KAAc;AACxC,MAAI,IAAI,SAAS;AACf,QAAI,QAAQ,KAAK;AACjB,QAAI,UAAU;AAAA,EAChB;AACF;AAGA,eAAsB,kBACpB,KACA,SACA,SACA,IACA;AACA,QAAM,UAAU,WAAW,MAAM;AAC/B,gBAAY,KAAK,OAAO;AAAA,EAC1B,GAAG,OAAO;AACV,QAAM,GAAG;AACT,eAAa,OAAO;AACtB;",
  "names": ["ora", "chalk"]
}
