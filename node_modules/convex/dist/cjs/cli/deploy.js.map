{
  "version": 3,
  "sources": ["../../../src/cli/deploy.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport { Command, Option } from \"commander\";\nimport inquirer from \"inquirer\";\nimport {\n  Context,\n  logError,\n  logFailure,\n  logFinishedStep,\n  logMessage,\n  logOutput,\n  oneoffContext,\n  showSpinner,\n} from \"../bundler/context.js\";\nimport {\n  CONVEX_DEPLOY_KEY_ENV_VAR_NAME,\n  deploymentNameFromAdminKey,\n  fetchProdDeploymentCredentials,\n  readConfiguredAdminKey,\n} from \"./lib/api.js\";\nimport {\n  gitBranchFromEnvironment,\n  isNonProdBuildEnvironment,\n  suggestedEnvVarName,\n} from \"./lib/envvars.js\";\nimport { PushOptions, runPush } from \"./lib/push.js\";\nimport { bigBrainAPI } from \"./lib/utils.js\";\nimport { spawnSync } from \"child_process\";\nimport { runFunctionAndLog } from \"./lib/run.js\";\nimport { usageStateWarning } from \"./lib/usage.js\";\n\nexport const deploy = new Command(\"deploy\")\n  .description(\"Deploy to a Convex deployment\")\n  .option(\"-v, --verbose\", \"Show full listing of changes\")\n  .option(\n    \"--dry-run\",\n    \"Print out the generated configuration without deploying to your Convex deployment\"\n  )\n  .option(\"-y, --yes\", \"Skip confirmation prompt when running locally\")\n  .addOption(\n    new Option(\n      \"--typecheck <mode>\",\n      `Whether to check TypeScript files with \\`tsc --noEmit\\` before deploying.`\n    )\n      .choices([\"enable\", \"try\", \"disable\"])\n      .default(\"try\")\n  )\n  .addOption(\n    new Option(\n      \"--codegen <mode>\",\n      \"Whether to regenerate code in `convex/_generated/` before pushing.\"\n    )\n      .choices([\"enable\", \"disable\"])\n      .default(\"enable\")\n  )\n  .addOption(\n    new Option(\n      \"--cmd <command>\",\n      \"Command to run as part of deploying your app (e.g. `vite build`). This command can depend on the environment variables specified in `--cmd-url-env-var-name` being set.\"\n    )\n  )\n  .addOption(\n    new Option(\n      \"--cmd-url-env-var-name <name>\",\n      \"Environment variable name to set Convex deployment URL (e.g. `VITE_CONVEX_URL`) when using `--cmd`\"\n    )\n  )\n  .addOption(\n    new Option(\n      \"--preview-run <functionName>\",\n      \"Function to run if deploying to a preview deployment. This is ignored if deploying to a production deployment.\"\n    )\n  )\n  .addOption(\n    new Option(\n      \"--preview-name <name>\",\n      \"The name to associate with this deployment if deploying to a preview deployment. Defaults to the current Git branch name in Vercel, Netlify and Github CI. This is ignored if deploying to a production deployment.\"\n    )\n  )\n  .addOption(\n    new Option(\n      \"--check-build-environment\",\n      \"Whether to check for a non-production build environment before deploying to a production Convex deployment.\"\n    )\n      .choices([\"enable\", \"disable\"])\n      .default(\"enable\")\n      .hideHelp()\n  )\n\n  .addOption(new Option(\"--debug-bundle-path <path>\").hideHelp())\n  .addOption(new Option(\"--debug\").hideHelp())\n  // Hidden options to pass in admin key and url for tests and local development\n  .addOption(new Option(\"--admin-key <adminKey>\").hideHelp())\n  .addOption(new Option(\"--url <url>\").hideHelp())\n  .addOption(new Option(\"--log-deployment-name\").hideHelp())\n  .showHelpAfterError()\n  .action(\n    async (cmdOptions: {\n      verbose: boolean | undefined;\n      dryRun: boolean | undefined;\n      yes: boolean | undefined;\n      typecheck: \"enable\" | \"try\" | \"disable\";\n      codegen: \"enable\" | \"disable\";\n      cmd: string | undefined;\n      cmdUrlEnvVarName: string | undefined;\n      previewRun: string | undefined;\n      previewName: string | undefined;\n\n      checkBuildEnvironment: \"enable\" | \"disable\";\n      debugBundlePath: string | undefined;\n      debug: boolean | undefined;\n      adminKey: string | undefined;\n      url: string | undefined;\n      logDeploymentName: boolean | undefined;\n    }) => {\n      const ctx = oneoffContext;\n\n      const configuredDeployKey =\n        readConfiguredAdminKey(cmdOptions.adminKey) ?? null;\n      if (\n        cmdOptions.checkBuildEnvironment === \"enable\" &&\n        isNonProdBuildEnvironment() &&\n        configuredDeployKey?.startsWith(\"prod:\")\n      ) {\n        logError(\n          ctx,\n          `Detected a non-production build environment and \"${CONVEX_DEPLOY_KEY_ENV_VAR_NAME}\" for a production Convex deployment.\\n\n          This is probably unintentional.\n          `\n        );\n        await ctx.crash(1);\n      }\n\n      await usageStateWarning(ctx);\n\n      if (\n        configuredDeployKey !== null &&\n        configuredDeployKey.startsWith(\"preview:\")\n      ) {\n        await handlePreview(ctx, { ...cmdOptions, configuredDeployKey });\n      } else {\n        await handleProduction(ctx, cmdOptions);\n      }\n    }\n  );\n\nasync function handlePreview(\n  ctx: Context,\n  options: {\n    configuredDeployKey: string;\n    dryRun: boolean | undefined;\n    previewName: string | undefined;\n    previewRun: string | undefined;\n    cmdUrlEnvVarName: string | undefined;\n    cmd: string | undefined;\n    verbose: boolean | undefined;\n    typecheck: \"enable\" | \"try\" | \"disable\";\n    codegen: \"enable\" | \"disable\";\n\n    debug: boolean | undefined;\n    debugBundlePath: string | undefined;\n    logDeploymentName: boolean | undefined;\n  }\n) {\n  const previewName = options.previewName ?? gitBranchFromEnvironment();\n  if (previewName === null) {\n    logError(\n      ctx,\n      \"`npx convex deploy` to a preview deployment could not determine the preview name. Provide one using `--preview-name`\"\n    );\n    await ctx.crash(1);\n  }\n\n  if (options.dryRun) {\n    logFinishedStep(\n      ctx,\n      `Would have claimed preview deployment for \"${previewName}\"`\n    );\n    await runCommand(ctx, {\n      cmdUrlEnvVarName: options.cmdUrlEnvVarName,\n      cmd: options.cmd,\n      dryRun: !!options.dryRun,\n      url: \"https://<PREVIEW DEPLOYMENT>.convex.cloud\",\n    });\n    logFinishedStep(\n      ctx,\n      `Would have deployed Convex functions to preview deployment for \"${previewName}\"`\n    );\n    if (options.previewRun !== undefined) {\n      logMessage(ctx, `Would have run function \"${options.previewRun}\"`);\n    }\n    return;\n  }\n\n  const data = await bigBrainAPI({\n    ctx,\n    method: \"POST\",\n    url: \"claim_preview_deployment\",\n    getAuthHeader: () =>\n      Promise.resolve(`Bearer ${options.configuredDeployKey}`),\n    data: {\n      identifier: previewName,\n    },\n  });\n\n  const previewAdminKey = data.adminKey;\n  const previewUrl = data.instanceUrl;\n\n  await runCommand(ctx, { ...options, url: previewUrl });\n\n  const pushOptions: PushOptions = {\n    adminKey: previewAdminKey,\n    verbose: !!options.verbose,\n    dryRun: false,\n    typecheck: options.typecheck,\n    debug: !!options.debug,\n    debugBundlePath: options.debugBundlePath,\n    codegen: options.codegen === \"enable\",\n    url: previewUrl,\n  };\n  showSpinner(ctx, `Deploying to ${previewUrl}...`);\n  await runPush(oneoffContext, pushOptions);\n  logFinishedStep(ctx, `Deployed Convex functions to ${previewUrl}`);\n\n  if (options.previewRun !== undefined) {\n    await runFunctionAndLog(\n      ctx,\n      previewUrl,\n      previewAdminKey,\n      options.previewRun,\n      {},\n      {\n        onSuccess: () => {\n          logFinishedStep(\n            ctx,\n            `Finished running function \"${options.previewRun}\"`\n          );\n        },\n      }\n    );\n  }\n  if (options.logDeploymentName) {\n    const deploymentName = await deploymentNameFromAdminKey(\n      ctx,\n      previewAdminKey\n    );\n    logOutput(ctx, deploymentName);\n  }\n}\n\nasync function handleProduction(\n  ctx: Context,\n  options: {\n    verbose: boolean | undefined;\n    dryRun: boolean | undefined;\n    yes: boolean | undefined;\n    typecheck: \"enable\" | \"try\" | \"disable\";\n    codegen: \"enable\" | \"disable\";\n    cmd: string | undefined;\n    cmdUrlEnvVarName: string | undefined;\n\n    debugBundlePath: string | undefined;\n    debug: boolean | undefined;\n    adminKey: string | undefined;\n    url: string | undefined;\n    logDeploymentName: boolean | undefined;\n  }\n) {\n  const { adminKey, url, deploymentNames } =\n    await fetchProdDeploymentCredentials(ctx, options);\n  if (deploymentNames !== undefined) {\n    const shouldPushToProd =\n      deploymentNames.prod === deploymentNames.configured ||\n      (options.yes ?? (await askToConfirmPush(ctx, deploymentNames, url)));\n    if (!shouldPushToProd) {\n      await ctx.crash(1);\n    }\n  }\n\n  await runCommand(ctx, { ...options, url });\n\n  const pushOptions: PushOptions = {\n    adminKey,\n    verbose: !!options.verbose,\n    dryRun: !!options.dryRun,\n    typecheck: options.typecheck,\n    debug: !!options.debug,\n    debugBundlePath: options.debugBundlePath,\n    codegen: options.codegen === \"enable\",\n    url,\n  };\n  showSpinner(\n    ctx,\n    `Deploying to ${url}...${options.dryRun ? \" [dry run]\" : \"\"}`\n  );\n  await runPush(oneoffContext, pushOptions);\n  logFinishedStep(\n    ctx,\n    `${\n      options.dryRun ? \"Would have deployed\" : \"Deployed\"\n    } Convex functions to ${url}`\n  );\n  if (options.logDeploymentName) {\n    const deploymentName = await deploymentNameFromAdminKey(ctx, adminKey);\n    logOutput(ctx, deploymentName);\n  }\n}\n\nasync function runCommand(\n  ctx: Context,\n  options: {\n    cmdUrlEnvVarName: string | undefined;\n    cmd: string | undefined;\n    dryRun: boolean | undefined;\n    url: string;\n  }\n) {\n  if (options.cmd === undefined) {\n    return;\n  }\n\n  const urlVar =\n    options.cmdUrlEnvVarName ?? (await suggestedEnvVarName(ctx)).envVar;\n  showSpinner(\n    ctx,\n    `Running '${options.cmd}' with environment variable \"${urlVar}\" set...${\n      options.dryRun ? \" [dry run]\" : \"\"\n    }`\n  );\n  if (!options.dryRun) {\n    const env = { ...process.env };\n    env[urlVar] = options.url;\n    const result = spawnSync(options.cmd, {\n      env,\n      stdio: \"inherit\",\n      shell: true,\n    });\n    if (result.status !== 0) {\n      logFailure(ctx, `'${options.cmd}' failed`);\n      await ctx.crash(1);\n    }\n  }\n  logFinishedStep(\n    ctx,\n    `${options.dryRun ? \"Would have run\" : \"Ran\"} \"${\n      options.cmd\n    }\" with environment variable \"${urlVar}\" set`\n  );\n}\n\nasync function askToConfirmPush(\n  ctx: Context,\n  deploymentNames: {\n    configured: string;\n    prod: string;\n  },\n  prodUrl: string\n) {\n  logMessage(\n    ctx,\n    `\\\nYou're currently developing against your ${chalk.bold(\"dev\")} deployment\n\n  ${deploymentNames.configured} (set in CONVEX_DEPLOYMENT)\n\nYour ${chalk.bold(\"prod\")} deployment ${chalk.bold(\n      deploymentNames.prod\n    )} serves traffic at:\n\n  ${(await suggestedEnvVarName(ctx)).envVar}=${chalk.bold(prodUrl)}\n\nMake sure that your published client is configured with this URL (for instructions see https://docs.convex.dev/hosting)\\n`\n  );\n  return (\n    await inquirer.prompt([\n      {\n        type: \"confirm\",\n        name: \"shouldPush\",\n        message: `Do you want to push your code to your prod deployment ${deploymentNames.prod} now?`,\n        default: true,\n      },\n    ])\n  ).shouldPush;\n}\n"],
  "mappings": "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",
  "names": ["chalk", "inquirer"]
}
