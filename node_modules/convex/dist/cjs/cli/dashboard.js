"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var dashboard_exports = {};
__export(dashboard_exports, {
  dashboard: () => dashboard,
  dashboardUrl: () => dashboardUrl,
  dashboardUrlForConfiguredDeployment: () => dashboardUrlForConfiguredDeployment
});
module.exports = __toCommonJS(dashboard_exports);
var import_commander = require("commander");
var import_chalk = __toESM(require("chalk"), 1);
var import_config = require("./lib/config.js");
var import_open = __toESM(require("open"), 1);
var import_context = require("../bundler/context.js");
var import_api = require("./lib/api.js");
var import_utils = require("./lib/utils.js");
const dashboard = new import_commander.Command("dashboard").description("Open the dashboard in the browser").option(
  "--no-open",
  "Don't automatically open the dashboard in the default browser"
).action(async (options) => {
  const ctx = import_context.oneoffContext;
  const configuredDeployment = await (0, import_utils.getConfiguredDeploymentOrCrash)(ctx);
  const loginUrl = await dashboardUrlForConfiguredDeployment(
    ctx,
    configuredDeployment
  );
  if (options.open) {
    (0, import_context.logMessage)(
      ctx,
      import_chalk.default.gray(`Opening ${loginUrl} in the default browser...`)
    );
    await (0, import_open.default)(loginUrl);
  } else {
    console.log(loginUrl);
  }
});
async function dashboardUrlForConfiguredDeployment(ctx, configuredDeployment) {
  if (configuredDeployment !== null) {
    const { team, project } = await (0, import_api.fetchTeamAndProject)(
      ctx,
      configuredDeployment
    );
    return dashboardUrl(team, project, configuredDeployment);
  }
  const { projectConfig } = await (0, import_config.readProjectConfig)(ctx);
  return dashboardUrlForConfig(ctx, projectConfig);
}
async function dashboardUrlForConfig(ctx, projectConfig) {
  const team = await (0, import_config.enforceDeprecatedConfigField)(ctx, projectConfig, "team");
  const project = await (0, import_config.enforceDeprecatedConfigField)(
    ctx,
    projectConfig,
    "project"
  );
  const prodUrl = await (0, import_config.enforceDeprecatedConfigField)(
    ctx,
    projectConfig,
    "prodUrl"
  );
  const host = process.env.CONVEX_PROVISION_HOST ? "http://localhost:6789" : "https://dashboard.convex.dev";
  if (process.env.CONVEX_PROVISION_HOST) {
    return host;
  }
  const deployment = prodUrl.match(/https?:\/\/([^.]*)[.]/)[1];
  return dashboardUrl(team, project, deployment);
}
function dashboardUrl(team, project, deploymentName) {
  const host = process.env.CONVEX_PROVISION_HOST ? "http://localhost:6789" : "https://dashboard.convex.dev";
  return `${host}/t/${team}${project !== null ? `/${project}` : ""}${deploymentName !== null ? `/${deploymentName}` : ""}`;
}
//# sourceMappingURL=dashboard.js.map
