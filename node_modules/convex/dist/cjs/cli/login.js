"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var login_exports = {};
__export(login_exports, {
  login: () => login
});
module.exports = __toCommonJS(login_exports);
var import_commander = require("commander");
var import_context = require("../bundler/context.js");
var import_login = require("./lib/login.js");
const login = new import_commander.Command("login").description("Login to Convex").option(
  "--device-name <name>",
  "Provide a name for the device being authorized"
).option(
  "-f, --force",
  "Proceed with login even if a valid access token already exists for this device"
).option(
  "--no-open",
  "Don't automatically open the login link in the default browser"
).addOption(new import_commander.Option("--override-auth-url <url>").hideHelp()).addOption(new import_commander.Option("--override-auth-client <id>").hideHelp()).addOption(new import_commander.Option("--override-auth-username <username>").hideHelp()).addOption(new import_commander.Option("--override-auth-password <password>").hideHelp()).addOption(new import_commander.Option("--override-access-token <token>").hideHelp()).addOption(new import_commander.Option("--accept-opt-ins").hideHelp()).addOption(new import_commander.Option("--dump-access-token").hideHelp()).action(async (options, cmd) => {
  const ctx = import_context.oneoffContext;
  if (!options.force && await (0, import_login.checkAuthorization)(ctx, options.acceptOptIns)) {
    (0, import_context.logFinishedStep)(
      ctx,
      "This device has previously been authorized and is ready for use with Convex."
    );
    return;
  }
  if (!!options.overrideAuthUsername !== !!options.overrideAuthPassword) {
    cmd.error(
      "If overriding credentials, both username and password must be provided"
    );
  }
  await (0, import_login.performLogin)(ctx, options);
});
//# sourceMappingURL=login.js.map
