{
  "version": 3,
  "sources": ["../../../src/cli/typecheck.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport { functionsDir, ensureHasConvexDependency } from \"./lib/utils.js\";\nimport { Command } from \"commander\";\nimport { readConfig } from \"./lib/config.js\";\nimport { typeCheckFunctions } from \"./lib/typecheck.js\";\nimport {\n  logFinishedStep,\n  logMessage,\n  oneoffContext,\n} from \"../bundler/context.js\";\n\n// Experimental (it's going to fail sometimes) TypeScript type checking.\n// Includes a separate command to help users debug their TypeScript configs.\n\nexport type TypecheckResult = \"cantTypeCheck\" | \"success\" | \"typecheckFailed\";\n\n/** Run the TypeScript compiler, as configured during  */\nexport const typecheck = new Command(\"typecheck\")\n  .description(\n    \"Run TypeScript typechecking on your Convex functions with `tsc --noEmit`.\"\n  )\n  .action(async () => {\n    const ctx = oneoffContext;\n    const { configPath, config: localConfig } = await readConfig(ctx, false);\n    await ensureHasConvexDependency(ctx, \"typecheck\");\n    await typeCheckFunctions(\n      ctx,\n      functionsDir(configPath, localConfig.projectConfig),\n      async (typecheckResult, logSpecificError) => {\n        logSpecificError?.();\n        if (typecheckResult === \"typecheckFailed\") {\n          logMessage(ctx, chalk.gray(\"Typecheck failed\"));\n          return await ctx.crash(1, \"invalid filesystem data\");\n        } else if (typecheckResult === \"cantTypeCheck\") {\n          logMessage(\n            ctx,\n            chalk.gray(\"Unable to typecheck; is TypeScript installed?\")\n          );\n          return await ctx.crash(1, \"invalid filesystem data\");\n        } else {\n          logFinishedStep(\n            ctx,\n            \"Typecheck passed: `tsc --noEmit` completed with exit code 0.\"\n          );\n          return await ctx.crash(0);\n        }\n      }\n    );\n  });\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,mBAAwD;AACxD,uBAAwB;AACxB,oBAA2B;AAC3B,uBAAmC;AACnC,qBAIO;AAQA,MAAM,YAAY,IAAI,yBAAQ,WAAW,EAC7C;AAAA,EACC;AACF,EACC,OAAO,YAAY;AAClB,QAAM,MAAM;AACZ,QAAM,EAAE,YAAY,QAAQ,YAAY,IAAI,UAAM,0BAAW,KAAK,KAAK;AACvE,YAAM,wCAA0B,KAAK,WAAW;AAChD,YAAM;AAAA,IACJ;AAAA,QACA,2BAAa,YAAY,YAAY,aAAa;AAAA,IAClD,OAAO,iBAAiB,qBAAqB;AAC3C,yBAAmB;AACnB,UAAI,oBAAoB,mBAAmB;AACzC,uCAAW,KAAK,aAAAA,QAAM,KAAK,kBAAkB,CAAC;AAC9C,eAAO,MAAM,IAAI,MAAM,GAAG,yBAAyB;AAAA,MACrD,WAAW,oBAAoB,iBAAiB;AAC9C;AAAA,UACE;AAAA,UACA,aAAAA,QAAM,KAAK,+CAA+C;AAAA,QAC5D;AACA,eAAO,MAAM,IAAI,MAAM,GAAG,yBAAyB;AAAA,MACrD,OAAO;AACL;AAAA,UACE;AAAA,UACA;AAAA,QACF;AACA,eAAO,MAAM,IAAI,MAAM,CAAC;AAAA,MAC1B;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": ["chalk"]
}
