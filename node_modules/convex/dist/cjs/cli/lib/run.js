"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var run_exports = {};
__export(run_exports, {
  formatValue: () => formatValue,
  runFunctionAndLog: () => runFunctionAndLog,
  subscribe: () => subscribe,
  subscribeAndLog: () => subscribeAndLog
});
module.exports = __toCommonJS(run_exports);
var import_chalk = __toESM(require("chalk"), 1);
var import_util = __toESM(require("util"), 1);
var import_ws = __toESM(require("ws"), 1);
var import_http_client_node = require("../../browser/http_client-node.js");
var import_browser = require("../../browser/index.js");
var import_server = require("../../server/index.js");
var import_value = require("../../values/value.js");
var import_context = require("../../bundler/context.js");
async function runFunctionAndLog(ctx, deploymentUrl, adminKey, functionName, args, callbacks) {
  const client = new import_http_client_node.ConvexHttpClient(deploymentUrl);
  client.setAdminAuth(adminKey);
  let result;
  try {
    result = await client.function((0, import_server.makeFunctionReference)(functionName), args);
  } catch (err) {
    (0, import_context.logFailure)(ctx, `Failed to run function "${functionName}":`);
    (0, import_context.logError)(ctx, import_chalk.default.red(err.toString().trim()));
    return await ctx.crash(1, "invalid filesystem or env vars");
  }
  callbacks?.onSuccess?.();
  if (result !== null) {
    (0, import_context.logOutput)(ctx, formatValue(result));
  }
}
function formatValue(value) {
  const json = (0, import_value.convexToJson)(value);
  if (process.stdout.isTTY) {
    return import_util.default.inspect(value, { colors: true, depth: null });
  } else {
    return JSON.stringify(json, null, 2);
  }
}
async function subscribeAndLog(ctx, deploymentUrl, adminKey, functionName, args) {
  return subscribe(
    ctx,
    deploymentUrl,
    adminKey,
    functionName,
    args,
    "indefinitely",
    {
      onStart() {
        (0, import_context.logFinishedStep)(
          ctx,
          `Watching query ${functionName} on ${deploymentUrl}...`
        );
      },
      onChange(client) {
        (0, import_context.logOutput)(
          ctx,
          formatValue(client.localQueryResult(functionName, args))
        );
      },
      onStop() {
        (0, import_context.logMessage)(ctx, `Closing connection to ${deploymentUrl}...`);
      }
    }
  );
}
async function subscribe(ctx, deploymentUrl, adminKey, functionName, args, until, callbacks) {
  let changes = 0;
  const client = new import_browser.BaseConvexClient(
    deploymentUrl,
    (updatedQueries) => {
      for (const _ of updatedQueries) {
        changes++;
        callbacks?.onChange?.(client);
        if (until === "first change" && changes > 1) {
          stopWatching();
        }
      }
    },
    {
      // pretend that a Node.js 'ws' library WebSocket is a browser WebSocket
      webSocketConstructor: import_ws.default,
      unsavedChangesWarning: false
    }
  );
  client.setAdminAuth(adminKey);
  const { unsubscribe } = client.subscribe(functionName, args);
  callbacks?.onStart?.(client);
  let done = false;
  let onDone;
  const stopWatching = () => {
    unsubscribe();
    void client.close();
    process.off("SIGINT", sigintListener);
    done = true;
    onDone(null);
  };
  const doneP = new Promise((resolve) => onDone = resolve);
  function sigintListener() {
    stopWatching();
  }
  process.on("SIGINT", sigintListener);
  while (!done) {
    const oneDay = 24 * 60 * 60 * 1e3;
    await Promise.race([
      doneP,
      new Promise((resolve) => setTimeout(resolve, oneDay))
    ]);
  }
}
//# sourceMappingURL=run.js.map
