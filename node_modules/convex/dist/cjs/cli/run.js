"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var run_exports = {};
__export(run_exports, {
  run: () => run
});
module.exports = __toCommonJS(run_exports);
var import_commander = require("commander");
var import_context = require("../bundler/context.js");
var import_dev = require("./dev.js");
var import_api = require("./lib/api.js");
var import_run = require("./lib/run.js");
var import_utils = require("./lib/utils.js");
const run = new import_commander.Command("run").description(
  "Run a Convex function (query, mutation, or action) after pushing local code."
).argument(
  "functionName",
  "identifier of the function to run, like `listMessages` or `dir/file:myFunction`"
).argument(
  "[args]",
  "JSON-formatted arguments object to pass to the function."
).option(
  "-w, --watch",
  "Watch a query, printing its result if the underlying data changes. Given function must be a query."
).option("--push", "Push code to deployment before running the function.").addOption(new import_commander.Option("--no-push").hideHelp()).option(
  "--prod",
  "Run the function on this project's production deployment, instead of the configured deployment. Can only be used with --no-push."
).addOption(new import_commander.Option("--url <url>").hideHelp()).addOption(new import_commander.Option("--admin-key <adminKey>").hideHelp()).addOption(
  new import_commander.Option(
    "--typecheck <mode>",
    `Whether to check TypeScript files with \`tsc --noEmit\`.`
  ).choices(["enable", "try", "disable"]).default("try")
).addOption(
  new import_commander.Option("--codegen <mode>", "Regenerate code in `convex/_generated/`").choices(["enable", "disable"]).default("enable")
).showHelpAfterError().action(async (functionName, argsString, options) => {
  const ctx = import_context.oneoffContext;
  const { adminKey, url: deploymentUrl } = await (0, import_api.fetchDeploymentCredentialsProvisionProd)(ctx, options);
  await (0, import_utils.ensureHasConvexDependency)(ctx, "run");
  const args = argsString ? JSON.parse(argsString) : {};
  if (options.prod && options.push) {
    (0, import_context.logFailure)(
      ctx,
      `\`convex run\` doesn't support pushing functions to prod deployments. Remove the --push flag. To push to production use \`npx convex deploy\`.`
    );
    return await ctx.crash(1, "fatal");
  }
  if (options.push) {
    await (0, import_dev.watchAndPush)(
      ctx,
      {
        adminKey,
        verbose: !!options.verbose,
        dryRun: false,
        typecheck: options.typecheck,
        debug: false,
        codegen: options.codegen === "enable",
        url: deploymentUrl
      },
      {
        once: true,
        traceEvents: false,
        untilSuccess: true
      }
    );
  }
  if (options.watch) {
    return await (0, import_run.subscribeAndLog)(
      ctx,
      deploymentUrl,
      adminKey,
      functionName,
      args
    );
  }
  return await (0, import_run.runFunctionAndLog)(
    ctx,
    deploymentUrl,
    adminKey,
    functionName,
    args
  );
});
//# sourceMappingURL=run.js.map
