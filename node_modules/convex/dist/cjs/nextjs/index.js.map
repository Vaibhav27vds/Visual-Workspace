{
  "version": 3,
  "sources": ["../../../src/nextjs/index.ts"],
  "sourcesContent": ["/**\n * Helpers for integrating Convex into Next.js applications using server rendering.\n *\n * This module contains:\n * 1. {@link preloadQuery}, for preloading data for reactive client components.\n * 2. {@link fetchQuery}, {@link fetchMutation} and {@link fetchAction} for loading and mutating Convex data\n *   from Next.js Server Components, Server Actions and Route Handlers.\n *\n * ## Usage\n *\n * All exported functions assume that a Convex deployment URL is set in the\n * `NEXT_PUBLIC_CONVEX_URL` environment variable. `npx convex dev` will\n * automatically set it during local development.\n *\n * ### Preloading data\n *\n * Preload data inside a Server Component:\n *\n * ```typescript\n * import { preloadQuery } from \"convex/nextjs\";\n * import { api } from \"@/convex/_generated/api\";\n * import ClientComponent from \"./ClientComponent\";\n *\n * export async function ServerComponent() {\n *   const preloaded = await preloadQuery(api.foo.baz);\n *   return <ClientComponent preloaded={preloaded} />;\n * }\n * ```\n *\n * And pass it to a Client Component:\n * ```typescript\n * import { Preloaded, usePreloadedQuery } from \"convex/nextjs\";\n * import { api } from \"@/convex/_generated/api\";\n *\n * export function ClientComponent(props: {\n *   preloaded: Preloaded<typeof api.foo.baz>;\n * }) {\n *   const data = await usePreloadedQuery(props.preloaded);\n *   // render `data`...\n * }\n * ```\n *\n * @module\n */\n\nimport { ConvexHttpClient } from \"../browser/index.js\";\nimport { Preloaded } from \"../react/index.js\";\nimport {\n  ArgsAndOptions,\n  FunctionReference,\n  FunctionReturnType,\n  getFunctionName,\n} from \"../server/index.js\";\nimport { convexToJson, jsonToConvex } from \"../values/index.js\";\n\n/**\n * Options to {@link preloadQuery}, {@link fetchQuery}, {@link fetchMutation} and {@link fetchAction}.\n */\nexport type NextjsOptions = {\n  /**\n   * The JWT-encoded OpenID Connect authentication token to use for the function call.\n   */\n  token?: string;\n  /**\n   * The URL of the Convex deployment to use for the function call.\n   * Defaults to `process.env.NEXT_PUBLIC_CONVEX_URL`.\n   */\n  url?: string;\n\n  /**\n   * @internal\n   */\n  adminToken?: string;\n};\n\n/**\n * Execute a Convex query function and return a `Preloaded`\n * payload which can be passed to {@link react.usePreloadedQuery} in a Client\n * Component.\n *\n * @param query - a {@link server.FunctionReference} for the public query to run\n * like `api.dir1.dir2.filename.func`.\n * @param args - The arguments object for the query. If this is omitted,\n * the arguments will be `{}`.\n * @param options -  A {@link NextjsOptions} options object for the query.\n * @returns A promise of the `Preloaded` payload.\n */\nexport async function preloadQuery<Query extends FunctionReference<\"query\">>(\n  query: Query,\n  ...args: ArgsAndOptions<Query, NextjsOptions>\n): Promise<Preloaded<Query>> {\n  const value = await fetchQuery(query, ...args);\n  const preloaded = {\n    _name: getFunctionName(query),\n    _argsJSON: convexToJson(args[0] ?? {}),\n    _valueJSON: convexToJson(value),\n  };\n  return preloaded as any;\n}\n\n/**\n * Returns the result of executing a query via {@link preloadQuery}.\n *\n * @param preloaded - The `Preloaded` payload returned by {@link preloadQuery}.\n * @returns The query result.\n */\nexport function preloadedQueryResult<Query extends FunctionReference<\"query\">>(\n  preloaded: Preloaded<Query>\n): FunctionReturnType<Query> {\n  return jsonToConvex(preloaded._valueJSON);\n}\n\n/**\n * Execute a Convex query function.\n *\n * @param query - a {@link server.FunctionReference} for the public query to run\n * like `api.dir1.dir2.filename.func`.\n * @param args - The arguments object for the query. If this is omitted,\n * the arguments will be `{}`.\n * @param options -  A {@link NextjsOptions} options object for the query.\n * @returns A promise of the query's result.\n */\nexport async function fetchQuery<Query extends FunctionReference<\"query\">>(\n  query: Query,\n  ...args: ArgsAndOptions<Query, NextjsOptions>\n): Promise<FunctionReturnType<Query>> {\n  const [fnArgs, options] = args;\n  const client = setupClient(options ?? {});\n  return client.query(query, fnArgs);\n}\n\n/**\n * Execute a Convex mutation function.\n *\n * @param mutation - A {@link server.FunctionReference} for the public mutation\n * to run like `api.dir1.dir2.filename.func`.\n * @param args - The arguments object for the mutation. If this is omitted,\n * the arguments will be `{}`.\n * @param options -  A {@link NextjsOptions} options object for the mutation.\n * @returns A promise of the mutation's result.\n */\nexport async function fetchMutation<\n  Mutation extends FunctionReference<\"mutation\">\n>(\n  mutation: Mutation,\n  ...args: ArgsAndOptions<Mutation, NextjsOptions>\n): Promise<FunctionReturnType<Mutation>> {\n  const [fnArgs, options] = args;\n  const client = setupClient(options ?? {});\n  return client.mutation(mutation, fnArgs);\n}\n\n/**\n * Execute a Convex action function.\n *\n * @param action - A {@link server.FunctionReference} for the public action\n * to run like `api.dir1.dir2.filename.func`.\n * @param args - The arguments object for the action. If this is omitted,\n * the arguments will be `{}`.\n * @param options -  A {@link NextjsOptions} options object for the action.\n * @returns A promise of the action's result.\n */\nexport async function fetchAction<Action extends FunctionReference<\"action\">>(\n  action: Action,\n  ...args: ArgsAndOptions<Action, NextjsOptions>\n): Promise<FunctionReturnType<Action>> {\n  const [fnArgs, options] = args;\n  const client = setupClient(options ?? {});\n  return client.action(action, fnArgs);\n}\n\nfunction setupClient(options: NextjsOptions) {\n  const client = new ConvexHttpClient(getConvexUrl(options.url));\n  if (options.token !== undefined) {\n    client.setAuth(options.token);\n  }\n  if (options.adminToken !== undefined) {\n    client.setAdminAuth(options.adminToken);\n  }\n  client.setFetchOptions({ cache: \"no-store\" });\n  return client;\n}\n\nfunction getConvexUrl(deploymentUrl: string | undefined) {\n  const url = deploymentUrl ?? process.env.NEXT_PUBLIC_CONVEX_URL;\n  validateDeploymentUrl(url, deploymentUrl === undefined);\n  return url!;\n}\n\nfunction validateDeploymentUrl(\n  deploymentUrl: string | undefined,\n  isFromEnv: boolean\n) {\n  if (typeof deploymentUrl === \"undefined\") {\n    throw new Error(\n      isFromEnv\n        ? `Environment variable NEXT_PUBLIC_CONVEX_URL is not set.`\n        : `Convex function called with undefined deployment address.`\n    );\n  }\n  if (typeof deploymentUrl !== \"string\") {\n    throw new Error(\n      `Invalid deployment address: found ${deploymentUrl as any}\".`\n    );\n  }\n  if (\n    !(deploymentUrl.startsWith(\"http:\") || deploymentUrl.startsWith(\"https:\"))\n  ) {\n    throw new Error(\n      `Invalid ${\n        isFromEnv ? \"NEXT_PUBLIC_CONVEX_URL\" : \"deployment address\"\n      }: Must start with \"https://\" or \"http://\". Found \"${deploymentUrl}\".`\n    );\n  }\n\n  // Skip validation on localhost because it's for internal Convex development.\n  if (\n    deploymentUrl.indexOf(\"127.0.0.1\") !== -1 ||\n    deploymentUrl.indexOf(\"localhost\") !== -1\n  ) {\n    return;\n  }\n\n  if (!deploymentUrl.endsWith(\".convex.cloud\")) {\n    throw new Error(\n      `Invalid ${\n        isFromEnv ? \"NEXT_PUBLIC_CONVEX_URL\" : \"deployment address\"\n      }: Must end with \".convex.cloud\". Found \"${deploymentUrl}\".`\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6CA,qBAAiC;AAEjC,oBAKO;AACP,oBAA2C;AAkC3C,eAAsB,aACpB,UACG,MACwB;AAC3B,QAAM,QAAQ,MAAM,WAAW,OAAO,GAAG,IAAI;AAC7C,QAAM,YAAY;AAAA,IAChB,WAAO,+BAAgB,KAAK;AAAA,IAC5B,eAAW,4BAAa,KAAK,CAAC,KAAK,CAAC,CAAC;AAAA,IACrC,gBAAY,4BAAa,KAAK;AAAA,EAChC;AACA,SAAO;AACT;AAQO,SAAS,qBACd,WAC2B;AAC3B,aAAO,4BAAa,UAAU,UAAU;AAC1C;AAYA,eAAsB,WACpB,UACG,MACiC;AACpC,QAAM,CAAC,QAAQ,OAAO,IAAI;AAC1B,QAAM,SAAS,YAAY,WAAW,CAAC,CAAC;AACxC,SAAO,OAAO,MAAM,OAAO,MAAM;AACnC;AAYA,eAAsB,cAGpB,aACG,MACoC;AACvC,QAAM,CAAC,QAAQ,OAAO,IAAI;AAC1B,QAAM,SAAS,YAAY,WAAW,CAAC,CAAC;AACxC,SAAO,OAAO,SAAS,UAAU,MAAM;AACzC;AAYA,eAAsB,YACpB,WACG,MACkC;AACrC,QAAM,CAAC,QAAQ,OAAO,IAAI;AAC1B,QAAM,SAAS,YAAY,WAAW,CAAC,CAAC;AACxC,SAAO,OAAO,OAAO,QAAQ,MAAM;AACrC;AAEA,SAAS,YAAY,SAAwB;AAC3C,QAAM,SAAS,IAAI,gCAAiB,aAAa,QAAQ,GAAG,CAAC;AAC7D,MAAI,QAAQ,UAAU,QAAW;AAC/B,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAC9B;AACA,MAAI,QAAQ,eAAe,QAAW;AACpC,WAAO,aAAa,QAAQ,UAAU;AAAA,EACxC;AACA,SAAO,gBAAgB,EAAE,OAAO,WAAW,CAAC;AAC5C,SAAO;AACT;AAEA,SAAS,aAAa,eAAmC;AACvD,QAAM,MAAM,iBAAiB,QAAQ,IAAI;AACzC,wBAAsB,KAAK,kBAAkB,MAAS;AACtD,SAAO;AACT;AAEA,SAAS,sBACP,eACA,WACA;AACA,MAAI,OAAO,kBAAkB,aAAa;AACxC,UAAM,IAAI;AAAA,MACR,YACI,4DACA;AAAA,IACN;AAAA,EACF;AACA,MAAI,OAAO,kBAAkB,UAAU;AACrC,UAAM,IAAI;AAAA,MACR,qCAAqC;AAAA,IACvC;AAAA,EACF;AACA,MACE,EAAE,cAAc,WAAW,OAAO,KAAK,cAAc,WAAW,QAAQ,IACxE;AACA,UAAM,IAAI;AAAA,MACR,WACE,YAAY,2BAA2B,yEACY;AAAA,IACvD;AAAA,EACF;AAGA,MACE,cAAc,QAAQ,WAAW,MAAM,MACvC,cAAc,QAAQ,WAAW,MAAM,IACvC;AACA;AAAA,EACF;AAEA,MAAI,CAAC,cAAc,SAAS,eAAe,GAAG;AAC5C,UAAM,IAAI;AAAA,MACR,WACE,YAAY,2BAA2B,+DACE;AAAA,IAC7C;AAAA,EACF;AACF;",
  "names": []
}
